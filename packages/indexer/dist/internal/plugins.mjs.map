{"version":3,"file":"plugins.mjs","sources":["../../src/plugins/context.ts"],"sourcesContent":["import { useIndexerContext } from \"../context\";\nimport { defineIndexerPlugin } from \"./config\";\n\nexport const INTERNAL_CONTEXT_PROPERTY = \"_internal\";\n\nexport function internalContext<TFilter, TBlock, TTxnParams>(\n  values: Record<string, unknown>,\n) {\n  return defineIndexerPlugin<TFilter, TBlock>((indexer) => {\n    indexer.hooks.hook(\"run:before\", () => {\n      try {\n        const ctx = useIndexerContext();\n        ctx[INTERNAL_CONTEXT_PROPERTY] = {\n          ...(ctx[INTERNAL_CONTEXT_PROPERTY] || {}),\n          ...values,\n        };\n      } catch (error) {\n        throw new Error(\"Failed to set internal context\", {\n          cause: error,\n        });\n      }\n    });\n  });\n}\n\nexport type InternalContext = {\n  indexerName: string;\n  availableIndexers: string[];\n};\n\nexport function useInternalContext(): InternalContext {\n  const ctx = useIndexerContext();\n\n  if (ctx[INTERNAL_CONTEXT_PROPERTY] === undefined) {\n    throw new Error(\n      \"Internal context is not available, possibly 'internalContext' plugin is missing!\",\n    );\n  }\n  return ctx[INTERNAL_CONTEXT_PROPERTY];\n}\n"],"names":[],"mappings":";;;;AAGO,MAAM,yBAA4B,GAAA,YAAA;AAElC,SAAS,gBACd,MACA,EAAA;AACA,EAAO,OAAA,mBAAA,CAAqC,CAAC,OAAY,KAAA;AACvD,IAAQ,OAAA,CAAA,KAAA,CAAM,IAAK,CAAA,YAAA,EAAc,MAAM;AACrC,MAAI,IAAA;AACF,QAAA,MAAM,MAAM,iBAAkB,EAAA,CAAA;AAC9B,QAAA,GAAA,CAAI,yBAAyB,CAAI,GAAA;AAAA,UAC/B,GAAI,GAAA,CAAI,yBAAyB,CAAA,IAAK,EAAC;AAAA,UACvC,GAAG,MAAA;AAAA,SACL,CAAA;AAAA,eACO,KAAO,EAAA;AACd,QAAM,MAAA,IAAI,MAAM,gCAAkC,EAAA;AAAA,UAChD,KAAO,EAAA,KAAA;AAAA,SACR,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAAA,GACF,CAAA,CAAA;AACH,CAAA;AAOO,SAAS,kBAAsC,GAAA;AACpD,EAAA,MAAM,MAAM,iBAAkB,EAAA,CAAA;AAE9B,EAAI,IAAA,GAAA,CAAI,yBAAyB,CAAA,KAAM,KAAW,CAAA,EAAA;AAChD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,kFAAA;AAAA,KACF,CAAA;AAAA,GACF;AACA,EAAA,OAAO,IAAI,yBAAyB,CAAA,CAAA;AACtC;;;;"}