{"version":3,"file":"testing.mjs","sources":["../../src/internal/testing.ts"],"sourcesContent":["import { type Finalize, type Invalidate, isCursor } from \"@apibara/protocol\";\nimport {\n  type MockBlock,\n  type MockFilter,\n  MockStream,\n  type MockStreamResponse,\n} from \"@apibara/protocol/testing\";\nimport { useIndexerContext } from \"../context\";\nimport { type IndexerConfig, createIndexer, defineIndexer } from \"../indexer\";\nimport { defineIndexerPlugin, logger } from \"../plugins\";\nimport { type InternalContext, internalContext } from \"./plugins\";\n\nexport type MockMessagesOptions = {\n  invalidate?: {\n    invalidateFromIndex: number;\n    invalidateTriggerIndex: number;\n  };\n  finalize?: {\n    finalizeToIndex: number;\n    finalizeTriggerIndex: number;\n  };\n  uniqueKey?: boolean;\n  baseBlockNumber?: bigint;\n};\n\nexport function generateMockMessages(\n  count = 10,\n  options?: MockMessagesOptions,\n): MockStreamResponse[] {\n  const invalidateAt = options?.invalidate;\n  const finalizeAt = options?.finalize;\n  const messages: MockStreamResponse[] = [];\n\n  const baseBlockNumber = options?.baseBlockNumber ?? BigInt(5_000_000);\n\n  for (let i = 0; i < count; i++) {\n    const currentBlockNumber = baseBlockNumber + BigInt(i);\n    const uniqueKey = uniqueKeyFromOrderKey(currentBlockNumber);\n    if (invalidateAt && i === invalidateAt.invalidateTriggerIndex) {\n      const invalidateToBlock =\n        baseBlockNumber + BigInt(invalidateAt.invalidateFromIndex);\n      messages.push({\n        _tag: \"invalidate\",\n        invalidate: {\n          cursor: {\n            orderKey: invalidateToBlock,\n            uniqueKey: options?.uniqueKey\n              ? uniqueKeyFromOrderKey(invalidateToBlock)\n              : undefined,\n          },\n        } as Invalidate,\n      });\n    } else if (finalizeAt && i === finalizeAt.finalizeTriggerIndex) {\n      const fianlizedToBlock =\n        baseBlockNumber + BigInt(finalizeAt.finalizeToIndex);\n      messages.push({\n        _tag: \"finalize\",\n        finalize: {\n          cursor: {\n            orderKey: fianlizedToBlock,\n            uniqueKey: options?.uniqueKey\n              ? uniqueKeyFromOrderKey(fianlizedToBlock)\n              : undefined,\n          },\n        } as Finalize,\n      });\n    } else {\n      messages.push({\n        _tag: \"data\",\n        data: {\n          cursor: { orderKey: currentBlockNumber - 1n },\n          finality: \"accepted\",\n          data: [{ data: `${baseBlockNumber + BigInt(i)}` }],\n          endCursor: {\n            orderKey: currentBlockNumber,\n            uniqueKey: options?.uniqueKey ? uniqueKey : undefined,\n          },\n          production: \"backfill\",\n        },\n      });\n    }\n  }\n\n  return messages;\n}\n\nfunction uniqueKeyFromOrderKey(orderKey: bigint): `0x${string}` {\n  return `0xff00${orderKey.toString()}`;\n}\n\ntype MockIndexerParams = {\n  internalContext?: InternalContext;\n  override?: Partial<IndexerConfig<MockFilter, MockBlock>>;\n};\n\nexport function getMockIndexer(params?: MockIndexerParams) {\n  const { internalContext: contextParams, override } = params ?? {};\n  const { plugins, ...rest } = override ?? {};\n\n  return createIndexer(\n    defineIndexer(MockStream)({\n      streamUrl: \"https://sepolia.ethereum.a5a.ch\",\n      finality: \"accepted\",\n      filter: {},\n      async transform() {},\n      plugins: [\n        logger(),\n        internalContext(\n          contextParams ??\n            ({\n              availableIndexers: [\"testing\"],\n              indexerName: \"testing\",\n            } as InternalContext),\n        ),\n        ...(plugins ?? []),\n      ],\n      ...(rest ?? {}),\n    }),\n  );\n}\n\nexport type MockRet = {\n  data: string;\n};\n\n/**\n * A mock sink used for testing. The indexer function can write to the output array.\n * The indexer context is optionally written to the metadata object.\n */\nexport function mockSink<TFilter, TBlock>({\n  output,\n  metadata,\n}: { output: unknown[]; metadata?: Record<string, unknown> }) {\n  return defineIndexerPlugin<TFilter, TBlock>((indexer) => {\n    indexer.hooks.hook(\"connect:before\", ({ request }) => {\n      if (metadata?.lastCursor && isCursor(metadata.lastCursor)) {\n        request.startingCursor = metadata.lastCursor;\n      }\n\n      if (metadata?.lastFilter) {\n        request.filter[1] = metadata.lastFilter as TFilter;\n      }\n    });\n\n    indexer.hooks.hook(\"connect:factory\", ({ request, endCursor }) => {\n      if (request.filter[1]) {\n        if (metadata) {\n          metadata.lastCursor = endCursor;\n          metadata.lastFilter = request.filter[1];\n        }\n      }\n    });\n\n    indexer.hooks.hook(\"handler:middleware\", ({ use }) => {\n      use(async (context, next) => {\n        context.output = output;\n        await next();\n        context.output = null;\n\n        if (metadata) {\n          metadata.lastCursor = context.endCursor;\n        }\n      });\n    });\n  });\n}\n\nexport function useMockSink(): { output: unknown[] } {\n  const context = useIndexerContext();\n  return { output: context.output };\n}\n"],"names":[],"mappings":"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"}