{"version":3,"file":"index.mjs","sources":["../../src/testing/index.ts"],"sourcesContent":["import { createAuthenticatedClient } from \"@apibara/protocol\";\nimport ci from \"ci-info\";\nimport { useIndexerContext } from \"../context\";\nimport { type IndexerWithStreamConfig, createIndexer } from \"../indexer\";\nimport { type InternalContext, internalContext } from \"../plugins/context\";\nimport { logger } from \"../plugins/logger\";\nimport type { CassetteOptions, VcrConfig } from \"../vcr/config\";\nimport { isCassetteAvailable } from \"../vcr/helper\";\nimport { record } from \"../vcr/record\";\nimport { replay } from \"../vcr/replay\";\n\nexport type VcrResult = Record<string, unknown>;\n\nexport function createVcr() {\n  let result: VcrResult;\n\n  return {\n    async run<TFilter, TBlock>(\n      cassetteName: string,\n      indexerConfig: IndexerWithStreamConfig<TFilter, TBlock>,\n      range: { fromBlock: bigint; toBlock: bigint },\n    ) {\n      const vcrConfig: VcrConfig = {\n        cassetteDir: \"cassettes\",\n      };\n\n      const cassetteOptions: CassetteOptions = {\n        name: cassetteName,\n        startingCursor: {\n          orderKey: range.fromBlock,\n        },\n        endingCursor: {\n          orderKey: range.toBlock,\n        },\n      };\n\n      indexerConfig.plugins = [\n        internalContext({\n          indexerName: cassetteName,\n          availableIndexers: [cassetteName],\n        } as InternalContext),\n        logger(),\n        ...(indexerConfig.plugins ?? []),\n      ];\n\n      const indexer = createIndexer(indexerConfig);\n\n      indexer.hooks.hook(\"run:after\", () => {\n        result = useIndexerContext();\n      });\n\n      if (!isCassetteAvailable(vcrConfig, cassetteName)) {\n        if (ci.isCI) {\n          throw new Error(\"Cannot record cassette in CI\");\n        }\n\n        const client = createAuthenticatedClient(\n          indexer.streamConfig,\n          indexer.options.streamUrl,\n        );\n        await record(vcrConfig, client, indexer, cassetteOptions);\n      } else {\n        await replay(vcrConfig, indexer, cassetteName);\n      }\n\n      return result;\n    },\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAaO,SAAS,SAAY,GAAA;AAC1B,EAAI,IAAA,MAAA,CAAA;AAEJ,EAAO,OAAA;AAAA,IACL,MAAM,GAAA,CACJ,YACA,EAAA,aAAA,EACA,KACA,EAAA;AACA,MAAA,MAAM,SAAuB,GAAA;AAAA,QAC3B,WAAa,EAAA,WAAA;AAAA,OACf,CAAA;AAEA,MAAA,MAAM,eAAmC,GAAA;AAAA,QACvC,IAAM,EAAA,YAAA;AAAA,QACN,cAAgB,EAAA;AAAA,UACd,UAAU,KAAM,CAAA,SAAA;AAAA,SAClB;AAAA,QACA,YAAc,EAAA;AAAA,UACZ,UAAU,KAAM,CAAA,OAAA;AAAA,SAClB;AAAA,OACF,CAAA;AAEA,MAAA,aAAA,CAAc,OAAU,GAAA;AAAA,QACtB,eAAgB,CAAA;AAAA,UACd,WAAa,EAAA,YAAA;AAAA,UACb,iBAAA,EAAmB,CAAC,YAAY,CAAA;AAAA,SACd,CAAA;AAAA,QACpB,MAAO,EAAA;AAAA,QACP,GAAI,aAAc,CAAA,OAAA,IAAW,EAAC;AAAA,OAChC,CAAA;AAEA,MAAM,MAAA,OAAA,GAAU,cAAc,aAAa,CAAA,CAAA;AAE3C,MAAQ,OAAA,CAAA,KAAA,CAAM,IAAK,CAAA,WAAA,EAAa,MAAM;AACpC,QAAA,MAAA,GAAS,iBAAkB,EAAA,CAAA;AAAA,OAC5B,CAAA,CAAA;AAED,MAAA,IAAI,CAAC,mBAAA,CAAoB,SAAW,EAAA,YAAY,CAAG,EAAA;AACjD,QAAA,IAAI,GAAG,IAAM,EAAA;AACX,UAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA,CAAA;AAAA,SAChD;AAEA,QAAA,MAAM,MAAS,GAAA,yBAAA;AAAA,UACb,OAAQ,CAAA,YAAA;AAAA,UACR,QAAQ,OAAQ,CAAA,SAAA;AAAA,SAClB,CAAA;AACA,QAAA,MAAM,MAAO,CAAA,SAAA,EAAW,MAAQ,EAAA,OAAA,EAAS,eAAe,CAAA,CAAA;AAAA,OACnD,MAAA;AACL,QAAM,MAAA,MAAA,CAAO,SAAW,EAAA,OAAA,EAAS,YAAY,CAAA,CAAA;AAAA,OAC/C;AAEA,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AAAA,GACF,CAAA;AACF;;;;"}