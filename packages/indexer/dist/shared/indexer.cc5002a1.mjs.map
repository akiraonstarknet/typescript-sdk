{"version":3,"file":"indexer.cc5002a1.mjs","sources":["../../src/plugins/logger.ts"],"sourcesContent":["import {\n  type ConsolaInstance,\n  type ConsolaReporter,\n  LogLevels,\n  consola,\n} from \"consola\";\nimport { useIndexerContext } from \"../context\";\nimport { defineIndexerPlugin } from \"./config\";\n\nexport type { ConsolaReporter, ConsolaInstance } from \"consola\";\n\nexport function logger<TFilter, TBlock, TTxnParams>({\n  logger,\n}: { logger?: ConsolaReporter } = {}) {\n  return defineIndexerPlugin<TFilter, TBlock>((indexer) => {\n    indexer.hooks.hook(\"run:before\", () => {\n      const ctx = useIndexerContext();\n\n      if (logger) {\n        ctx.logger = consola.create({ reporters: [logger] });\n      } else {\n        ctx.logger = consola.create({});\n      }\n\n      if (ctx.debug) {\n        ctx.logger.level = LogLevels.debug;\n      }\n    });\n  });\n}\n\nexport function useLogger(): ConsolaInstance {\n  const ctx = useIndexerContext();\n\n  if (!ctx?.logger)\n    throw new Error(\"Logger plugin is not available in context\");\n\n  return ctx.logger;\n}\n"],"names":["logger"],"mappings":";;;AAWO,SAAS,MAAoC,CAAA;AAAA,EAClD,MAAAA,EAAAA,OAAAA;AACF,CAAA,GAAkC,EAAI,EAAA;AACpC,EAAO,OAAA,mBAAA,CAAqC,CAAC,OAAY,KAAA;AACvD,IAAQ,OAAA,CAAA,KAAA,CAAM,IAAK,CAAA,YAAA,EAAc,MAAM;AACrC,MAAA,MAAM,MAAM,iBAAkB,EAAA,CAAA;AAE9B,MAAA,IAAIA,OAAQ,EAAA;AACV,QAAI,GAAA,CAAA,MAAA,GAAS,QAAQ,MAAO,CAAA,EAAE,WAAW,CAACA,OAAM,GAAG,CAAA,CAAA;AAAA,OAC9C,MAAA;AACL,QAAA,GAAA,CAAI,MAAS,GAAA,OAAA,CAAQ,MAAO,CAAA,EAAE,CAAA,CAAA;AAAA,OAChC;AAEA,MAAA,IAAI,IAAI,KAAO,EAAA;AACb,QAAI,GAAA,CAAA,MAAA,CAAO,QAAQ,SAAU,CAAA,KAAA,CAAA;AAAA,OAC/B;AAAA,KACD,CAAA,CAAA;AAAA,GACF,CAAA,CAAA;AACH,CAAA;AAEO,SAAS,SAA6B,GAAA;AAC3C,EAAA,MAAM,MAAM,iBAAkB,EAAA,CAAA;AAE9B,EAAA,IAAI,CAAC,GAAK,EAAA,MAAA;AACR,IAAM,MAAA,IAAI,MAAM,2CAA2C,CAAA,CAAA;AAE7D,EAAA,OAAO,GAAI,CAAA,MAAA,CAAA;AACb;;;;"}