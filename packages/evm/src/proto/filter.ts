// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: filter.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Address, B256 } from "./common";

export const protobufPackage = "evm.v2";

/** EVM DNA definitions (filter). */

export interface Filter {
  /** Include header. */
  readonly header?:
    | HeaderFilter
    | undefined;
  /** Filter withdrawals. */
  readonly withdrawals: readonly WithdrawalFilter[];
  /** Filter transactions. */
  readonly transactions: readonly TransactionFilter[];
  /** Filter logs. */
  readonly logs: readonly LogFilter[];
}

export interface HeaderFilter {
  /** Always include header data. Defaults to `false`. */
  readonly always?: boolean | undefined;
}

export interface WithdrawalFilter {
  /** Filter based on the validator index. */
  readonly validatorIndex?:
    | bigint
    | undefined;
  /** Filter based on the withdrawal's target address. */
  readonly address?: Address | undefined;
}

export interface TransactionFilter {
  /** Filter based on the transaction's sender address. */
  readonly from?:
    | Address
    | undefined;
  /** Filter based on the transaction's recipient address. */
  readonly to?:
    | Address
    | undefined;
  /** Flag to request the transaction's receipt. Defaults to `false`. */
  readonly includeReceipt?:
    | boolean
    | undefined;
  /** Flag to request the transaction's logs. Defaults to `false`. */
  readonly includeLogs?: boolean | undefined;
}

export interface LogFilter {
  /** Filter based on the log's contract address. */
  readonly address?:
    | Address
    | undefined;
  /** Filter based on the log's topics. */
  readonly topics: readonly Topic[];
  /**
   * Only returns logs with topics of exactly the same length as the filter.
   *
   * Defaults to `false`.
   */
  readonly strict?:
    | boolean
    | undefined;
  /** Flag to request the log's transaction. Defaults to `false`. */
  readonly includeTransaction?:
    | boolean
    | undefined;
  /** Flag to request the log's receipt. Defaults to `false`. */
  readonly includeReceipt?: boolean | undefined;
}

/** Topic filter. */
export interface Topic {
  /** Topic value. Leave empty to match any topic. */
  readonly value?: B256 | undefined;
}

function createBaseFilter(): Filter {
  return { header: undefined, withdrawals: [], transactions: [], logs: [] };
}

export const Filter = {
  encode(message: Filter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.header !== undefined) {
      HeaderFilter.encode(message.header, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.withdrawals) {
      WithdrawalFilter.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.transactions) {
      TransactionFilter.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.logs) {
      LogFilter.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Filter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = HeaderFilter.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.withdrawals.push(WithdrawalFilter.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.transactions.push(TransactionFilter.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logs.push(LogFilter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filter {
    return {
      header: isSet(object.header) ? HeaderFilter.fromJSON(object.header) : undefined,
      withdrawals: globalThis.Array.isArray(object?.withdrawals)
        ? object.withdrawals.map((e: any) => WithdrawalFilter.fromJSON(e))
        : [],
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => TransactionFilter.fromJSON(e))
        : [],
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => LogFilter.fromJSON(e)) : [],
    };
  },

  toJSON(message: Filter): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = HeaderFilter.toJSON(message.header);
    }
    if (message.withdrawals?.length) {
      obj.withdrawals = message.withdrawals.map((e) => WithdrawalFilter.toJSON(e));
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => TransactionFilter.toJSON(e));
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => LogFilter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Filter>): Filter {
    return Filter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Filter>): Filter {
    const message = createBaseFilter() as any;
    message.header = (object.header !== undefined && object.header !== null)
      ? HeaderFilter.fromPartial(object.header)
      : undefined;
    message.withdrawals = object.withdrawals?.map((e) => WithdrawalFilter.fromPartial(e)) || [];
    message.transactions = object.transactions?.map((e) => TransactionFilter.fromPartial(e)) || [];
    message.logs = object.logs?.map((e) => LogFilter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHeaderFilter(): HeaderFilter {
  return { always: undefined };
}

export const HeaderFilter = {
  encode(message: HeaderFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.always !== undefined) {
      writer.uint32(8).bool(message.always);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HeaderFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.always = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderFilter {
    return { always: isSet(object.always) ? globalThis.Boolean(object.always) : undefined };
  },

  toJSON(message: HeaderFilter): unknown {
    const obj: any = {};
    if (message.always !== undefined) {
      obj.always = message.always;
    }
    return obj;
  },

  create(base?: DeepPartial<HeaderFilter>): HeaderFilter {
    return HeaderFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HeaderFilter>): HeaderFilter {
    const message = createBaseHeaderFilter() as any;
    message.always = object.always ?? undefined;
    return message;
  },
};

function createBaseWithdrawalFilter(): WithdrawalFilter {
  return { validatorIndex: undefined, address: undefined };
}

export const WithdrawalFilter = {
  encode(message: WithdrawalFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorIndex !== undefined) {
      if (BigInt.asUintN(64, message.validatorIndex) !== message.validatorIndex) {
        throw new globalThis.Error("value provided for field message.validatorIndex of type uint64 too large");
      }
      writer.uint32(8).uint64(message.validatorIndex.toString());
    }
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WithdrawalFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawalFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.validatorIndex = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WithdrawalFilter {
    return {
      validatorIndex: isSet(object.validatorIndex) ? BigInt(object.validatorIndex) : undefined,
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
    };
  },

  toJSON(message: WithdrawalFilter): unknown {
    const obj: any = {};
    if (message.validatorIndex !== undefined) {
      obj.validatorIndex = message.validatorIndex.toString();
    }
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    return obj;
  },

  create(base?: DeepPartial<WithdrawalFilter>): WithdrawalFilter {
    return WithdrawalFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WithdrawalFilter>): WithdrawalFilter {
    const message = createBaseWithdrawalFilter() as any;
    message.validatorIndex = object.validatorIndex ?? undefined;
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    return message;
  },
};

function createBaseTransactionFilter(): TransactionFilter {
  return { from: undefined, to: undefined, includeReceipt: undefined, includeLogs: undefined };
}

export const TransactionFilter = {
  encode(message: TransactionFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.from !== undefined) {
      Address.encode(message.from, writer.uint32(10).fork()).ldelim();
    }
    if (message.to !== undefined) {
      Address.encode(message.to, writer.uint32(18).fork()).ldelim();
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(24).bool(message.includeReceipt);
    }
    if (message.includeLogs !== undefined) {
      writer.uint32(32).bool(message.includeLogs);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.from = Address.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.to = Address.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeLogs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionFilter {
    return {
      from: isSet(object.from) ? Address.fromJSON(object.from) : undefined,
      to: isSet(object.to) ? Address.fromJSON(object.to) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
      includeLogs: isSet(object.includeLogs) ? globalThis.Boolean(object.includeLogs) : undefined,
    };
  },

  toJSON(message: TransactionFilter): unknown {
    const obj: any = {};
    if (message.from !== undefined) {
      obj.from = Address.toJSON(message.from);
    }
    if (message.to !== undefined) {
      obj.to = Address.toJSON(message.to);
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    if (message.includeLogs !== undefined) {
      obj.includeLogs = message.includeLogs;
    }
    return obj;
  },

  create(base?: DeepPartial<TransactionFilter>): TransactionFilter {
    return TransactionFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransactionFilter>): TransactionFilter {
    const message = createBaseTransactionFilter() as any;
    message.from = (object.from !== undefined && object.from !== null) ? Address.fromPartial(object.from) : undefined;
    message.to = (object.to !== undefined && object.to !== null) ? Address.fromPartial(object.to) : undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    message.includeLogs = object.includeLogs ?? undefined;
    return message;
  },
};

function createBaseLogFilter(): LogFilter {
  return {
    address: undefined,
    topics: [],
    strict: undefined,
    includeTransaction: undefined,
    includeReceipt: undefined,
  };
}

export const LogFilter = {
  encode(message: LogFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.topics) {
      Topic.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.strict !== undefined) {
      writer.uint32(24).bool(message.strict);
    }
    if (message.includeTransaction !== undefined) {
      writer.uint32(32).bool(message.includeTransaction);
    }
    if (message.includeReceipt !== undefined) {
      writer.uint32(40).bool(message.includeReceipt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogFilter() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.topics.push(Topic.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.strict = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeTransaction = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeReceipt = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogFilter {
    return {
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => Topic.fromJSON(e)) : [],
      strict: isSet(object.strict) ? globalThis.Boolean(object.strict) : undefined,
      includeTransaction: isSet(object.includeTransaction) ? globalThis.Boolean(object.includeTransaction) : undefined,
      includeReceipt: isSet(object.includeReceipt) ? globalThis.Boolean(object.includeReceipt) : undefined,
    };
  },

  toJSON(message: LogFilter): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.topics?.length) {
      obj.topics = message.topics.map((e) => Topic.toJSON(e));
    }
    if (message.strict !== undefined) {
      obj.strict = message.strict;
    }
    if (message.includeTransaction !== undefined) {
      obj.includeTransaction = message.includeTransaction;
    }
    if (message.includeReceipt !== undefined) {
      obj.includeReceipt = message.includeReceipt;
    }
    return obj;
  },

  create(base?: DeepPartial<LogFilter>): LogFilter {
    return LogFilter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogFilter>): LogFilter {
    const message = createBaseLogFilter() as any;
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.topics = object.topics?.map((e) => Topic.fromPartial(e)) || [];
    message.strict = object.strict ?? undefined;
    message.includeTransaction = object.includeTransaction ?? undefined;
    message.includeReceipt = object.includeReceipt ?? undefined;
    return message;
  },
};

function createBaseTopic(): Topic {
  return { value: undefined };
}

export const Topic = {
  encode(message: Topic, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== undefined) {
      B256.encode(message.value, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Topic {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopic() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = B256.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Topic {
    return { value: isSet(object.value) ? B256.fromJSON(object.value) : undefined };
  },

  toJSON(message: Topic): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = B256.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Topic>): Topic {
    return Topic.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Topic>): Topic {
    const message = createBaseTopic() as any;
    message.value = (object.value !== undefined && object.value !== null) ? B256.fromPartial(object.value) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string }
    ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { readonly $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
