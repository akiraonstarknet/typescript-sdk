{"version":3,"file":"index.mjs","sources":["../../src/core/config/defaults.ts","../../src/core/config/resolvers/paths.resolver.ts","../../src/core/config/resolvers/runtime.resolver.ts","../../src/core/config/loader.ts","../../src/core/config/update.ts","../../src/core/scan.ts","../../src/core/apibara.ts","../../src/core/build/error.ts","../../src/core/build/dev.ts","../../src/core/build/prod.ts","../../src/core/build/build.ts","../../src/core/path.ts","../../src/core/build/prepare.ts","../../src/core/build/types.ts"],"sourcesContent":["import type { ApibaraConfig } from \"apibara/types\";\n\nexport const ApibaraDefaults: ApibaraConfig = {\n  rootDir: \".\",\n  indexersDir: \"indexers\",\n\n  runtimeConfig: {},\n  hooks: {},\n\n  buildDir: \".apibara\",\n\n  typescript: {\n    strict: false,\n    generateRuntimeConfigTypes: true,\n    internalPaths: false,\n  },\n\n  node: true,\n  exportConditions: [\"node\"],\n};\n","import type { ApibaraOptions } from \"apibara/types\";\nimport { resolve } from \"pathe\";\n\nexport async function resolvePathOptions(options: ApibaraOptions) {\n  options.rootDir = resolve(options.rootDir || \".\");\n\n  for (const key of [\"buildDir\"] as const) {\n    options[key] = resolve(options.rootDir, options[key]);\n  }\n\n  if (!options.outputDir) {\n    options.outputDir = resolve(options.rootDir, \".apibara/build\");\n  }\n}\n","import {\n  ENV_INTERNAL_APIBARA_PRESET,\n  ENV_INTERNAL_APIBARA_PRESETS,\n  ENV_INTERNAL_APIBARA_PROCESSED_RUNTIME,\n  ENV_INTERNAL_APIBARA_RUNTIME,\n  USER_ENV_APIBARA_RUNTIME_CONFIG,\n  getProcessedRuntimeConfig,\n} from \"apibara/common\";\nimport type { ApibaraOptions } from \"apibara/types\";\n\nexport function runtimeConfigResolver(options: Partial<ApibaraOptions>) {\n  try {\n    const { runtimeConfig, preset, presets } = options;\n\n    if (runtimeConfig) {\n      process.env[ENV_INTERNAL_APIBARA_RUNTIME] = JSON.stringify(runtimeConfig);\n    }\n    if (preset) {\n      process.env[ENV_INTERNAL_APIBARA_PRESET] = preset;\n    }\n\n    if (presets) {\n      process.env[ENV_INTERNAL_APIBARA_PRESETS] = JSON.stringify(presets);\n    }\n\n    const userEnvRuntimeConfig = JSON.parse(\n      process.env[USER_ENV_APIBARA_RUNTIME_CONFIG] ?? \"{}\",\n    );\n\n    // This is final processed runtime config that will be used by the indexer and useRuntimeConfig hook\n    process.env[ENV_INTERNAL_APIBARA_PROCESSED_RUNTIME] = JSON.stringify(\n      getProcessedRuntimeConfig({\n        preset,\n        presets,\n        runtimeConfig,\n        userEnvRuntimeConfig,\n      }),\n    );\n  } catch (error) {\n    throw new Error(\"Failed to process & set runtime environment variables\", {\n      cause: error,\n    });\n  }\n}\n","import type {\n  ApibaraConfig,\n  ApibaraOptions,\n  LoadConfigOptions,\n} from \"apibara/types\";\nimport { loadConfig, watchConfig } from \"c12\";\nimport { klona } from \"klona/full\";\nimport { ApibaraDefaults } from \"./defaults\";\nimport { resolvePathOptions } from \"./resolvers/paths.resolver\";\nimport { runtimeConfigResolver } from \"./resolvers/runtime.resolver\";\n\n// runtimeConfigResolver handles assigning runtime values to env\nconst configResolvers = [resolvePathOptions, runtimeConfigResolver] as const;\n\nexport async function loadOptions(\n  configOverrides: ApibaraConfig = {},\n  opts: LoadConfigOptions = {},\n  dev = false,\n): Promise<ApibaraOptions> {\n  const options = await _loadUserConfig(configOverrides, opts, dev);\n\n  // Check if the runtimeConfig is serializable\n  try {\n    JSON.stringify(options.runtimeConfig);\n  } catch (error) {\n    throw new Error(\n      \"Non-serializable runtimeConfig. Please ensure the config is serializable.\",\n      { cause: error },\n    );\n  }\n\n  for (const resolver of configResolvers) {\n    await resolver(options);\n  }\n\n  return options;\n}\n\nasync function _loadUserConfig(\n  configOverrides: ApibaraConfig = {},\n  opts: LoadConfigOptions = {},\n  dev = false,\n): Promise<ApibaraOptions> {\n  // biome-ignore lint: noParameterAssign\n  configOverrides = klona(configOverrides);\n\n  const loadedConfig = await (opts.watch\n    ? watchConfig<ApibaraConfig>\n    : loadConfig<ApibaraConfig>)({\n    name: \"apibara\",\n    dotenv: dev,\n    cwd: configOverrides.rootDir,\n    overrides: {\n      ...configOverrides,\n    },\n    defaults: { ...ApibaraDefaults },\n    ...opts.c12,\n  });\n\n  const options = klona(loadedConfig.config) as ApibaraOptions;\n\n  options._config = configOverrides;\n  options._c12 = loadedConfig;\n\n  if (dev) {\n    options.dev = dev;\n  }\n\n  return options;\n}\n","import type { Apibara, ApibaraDynamicConfig } from \"apibara/types\";\nimport { runtimeConfigResolver } from \"./resolvers/runtime.resolver\";\n\nexport async function updateApibaraConfig(\n  apibara: Apibara,\n  newConfig: ApibaraDynamicConfig,\n) {\n  // applies new config values to env again during hot reload\n  runtimeConfigResolver(newConfig);\n  apibara.logger.success(\"Apibara config hot reloaded!\");\n  // we simply stop indexers and restart them with updated runtime values\n  await apibara.hooks.callHook(\"dev:reload\");\n}\n","import type { Apibara } from \"apibara/types\";\nimport fse from \"fs-extra\";\nimport { basename, join } from \"pathe\";\n\nconst INDEXER_EXTENSIONS = [\".indexer.ts\", \".indexer.js\", \".indexer.mjs\"];\n\nexport async function scanIndexers(apibara: Apibara) {\n  apibara.logger.debug(\"Scanning indexers\");\n\n  const indexersDir = join(\n    apibara.options.rootDir,\n    apibara.options.indexersDir,\n  );\n\n  if (!fse.existsSync(indexersDir)) {\n    throw new Error(`Indexers directory not found: ${indexersDir}`);\n  }\n\n  apibara.indexers = [];\n\n  for (const file of fse.readdirSync(indexersDir)) {\n    const indexerName = indexerNameFromFile(file);\n    if (indexerName) {\n      apibara.indexers.push({\n        name: indexerName,\n        indexer: join(indexersDir, file),\n      });\n    }\n  }\n\n  apibara.logger.debug(`Found ${apibara.indexers.length} indexers`);\n}\n\nfunction indexerNameFromFile(file: string) {\n  for (const extension of INDEXER_EXTENSIONS) {\n    if (file.endsWith(extension)) {\n      return basename(file, extension);\n    }\n  }\n}\n","import type {\n  Apibara,\n  ApibaraConfig,\n  ApibaraDynamicConfig,\n  LoadConfigOptions,\n} from \"apibara/types\";\nimport consola from \"consola\";\nimport { createHooks } from \"hookable\";\nimport { loadOptions } from \"./config/loader\";\nimport { updateApibaraConfig } from \"./config/update\";\nimport { scanIndexers } from \"./scan\";\n\nexport async function createApibara(\n  config: ApibaraConfig = {},\n  opts: LoadConfigOptions = {},\n  dev = false,\n): Promise<Apibara> {\n  const options = await loadOptions(config, opts, dev);\n\n  // Enable source map support in Node\n  process.env.NODE_OPTIONS = process.env.NODE_OPTIONS\n    ? `${process.env.NODE_OPTIONS} --enable-source-maps`\n    : \"--enable-source-maps\";\n\n  const apibara: Apibara = {\n    options,\n    indexers: [],\n    hooks: createHooks(),\n    close: () => apibara.hooks.callHook(\"close\"),\n    logger: consola.withTag(\"apibara\"),\n    async updateConfig(newConfig: ApibaraDynamicConfig) {\n      updateApibaraConfig(apibara, newConfig);\n    },\n  };\n\n  apibara.hooks.addHooks(apibara.options.hooks);\n\n  await scanIndexers(apibara);\n\n  return apibara;\n}\n","import { isAbsolute, relative } from \"pathe\";\nimport type * as rolldown from \"rolldown\";\n\nexport function formatRolldownError(_error: rolldown.RollupError) {\n  try {\n    const logs: string[] = [_error.toString()];\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    const errors = (_error as any)?.errors || [_error as rolldown.RollupError];\n    for (const error of errors) {\n      const id = error.path || error.id || (_error as rolldown.RollupError).id;\n      let path = isAbsolute(id) ? relative(process.cwd(), id) : id;\n      const location = (error as rolldown.RollupError).loc;\n      if (location) {\n        path += `:${location.line}:${location.column}`;\n      }\n      const text = (error as rolldown.RollupError).frame;\n\n      logs.push(\n        `Rolldown error while processing \\`${path}\\`` + text\n          ? \"\\n\\n\" + text\n          : \"\",\n      );\n    }\n    return logs.join(\"\\n\");\n  } catch {\n    return _error?.toString();\n  }\n}\n","import type { Apibara } from \"apibara/types\";\nimport { watch } from \"chokidar\";\nimport defu from \"defu\";\nimport { join } from \"pathe\";\nimport { debounce } from \"perfect-debounce\";\nimport * as rolldown from \"rolldown\";\nimport { formatRolldownError } from \"./error\";\n\nexport async function watchDev(\n  apibara: Apibara,\n  rolldownConfig: rolldown.RolldownOptions,\n) {\n  let rolldownWatcher: rolldown.RolldownWatcher;\n  async function load() {\n    apibara.logger.start(\"Setting up a dev server\");\n    if (rolldownWatcher) {\n      await rolldownWatcher.close();\n    }\n    rolldownWatcher = startRolldownWatcher(apibara, rolldownConfig);\n  }\n  const reload = debounce(async () => await load());\n\n  const watchPatterns = getWatchPatterns(apibara);\n\n  const watchReloadEvents = new Set([\"add\", \"addDir\", \"unlink\", \"unlinkDir\"]);\n  const reloadWatcher = watch(watchPatterns, { ignoreInitial: true }).on(\n    \"all\",\n    async (event) => {\n      if (watchReloadEvents.has(event)) {\n        await reload();\n      }\n    },\n  );\n\n  apibara.hooks.hook(\"close\", () => {\n    rolldownWatcher.close();\n    reloadWatcher.close();\n  });\n\n  apibara.hooks.hook(\"rolldown:reload\", async () => await reload());\n\n  await load();\n}\n\nfunction startRolldownWatcher(\n  apibara: Apibara,\n  rolldownConfig: rolldown.RolldownOptions,\n) {\n  const ignorePatterns = getIgnorePatterns(apibara);\n  const watcher = rolldown.watch(\n    defu(rolldownConfig, {\n      watch: {\n        exclude: ignorePatterns,\n        ...((apibara.options.watchOptions ?? {}) as rolldown.WatchOptions),\n      },\n    }),\n  );\n  let start: number;\n\n  watcher.on(\"event\", async (event) => {\n    switch (event.code) {\n      // The watcher is (re)starting\n      case \"START\": {\n        await apibara.hooks.callHook(\"dev:restart\");\n        return;\n      }\n\n      // Building an individual bundle\n      case \"BUNDLE_START\": {\n        start = Date.now();\n        return;\n      }\n\n      // Finished building all bundles\n      case \"END\": {\n        apibara.hooks.callHook(\"compiled\", apibara);\n        apibara.logger.success(\n          \"Indexers built\",\n          start ? `in ${Date.now() - start} ms` : \"\",\n        );\n        await apibara.hooks.callHook(\"dev:reload\");\n        return;\n      }\n\n      // Encountered an error while bundling\n      case \"ERROR\": {\n        apibara.logger.error(formatRolldownError(event.error));\n      }\n    }\n  });\n  return watcher;\n}\n\nconst getWatchPatterns = (apibara: Apibara) => [\n  join(apibara.options.rootDir, \"indexers\"),\n];\n\nconst getIgnorePatterns = (apibara: Apibara) => [\n  \"**/.apibara/**\",\n  \"**/.git/**\",\n  \"**/.DS_Store\",\n  \"**/node_modules/**\",\n  \"**/dist/**\",\n  \"**/.turbo/**\",\n  // changes to apibara.config is handled by c12 itself so we dont need rolldown to handle this\n  \"**/apibara.config?(.ts|.js|.mjs)\",\n];\n","import type { Apibara } from \"apibara/types\";\nimport { colors } from \"consola/utils\";\nimport * as rolldown from \"rolldown\";\n\nexport async function buildProduction(\n  apibara: Apibara,\n  rolldownConfig: rolldown.RolldownOptions,\n) {\n  if (!apibara.options.disableLogs) {\n    apibara.logger.start(\n      `Building ${colors.cyan(apibara.indexers.length)} indexers`,\n    );\n  }\n\n  const startTime = Date.now();\n\n  try {\n    const bundle = await rolldown.rolldown(rolldownConfig);\n\n    if (Array.isArray(rolldownConfig.output)) {\n      for (const outputOptions of rolldownConfig.output) {\n        await bundle.write(outputOptions);\n      }\n    } else if (rolldownConfig.output) {\n      await bundle.write(rolldownConfig.output as rolldown.OutputOptions);\n    } else {\n      throw new Error(\"No output options specified in Rolldown config\");\n    }\n\n    await bundle.close();\n\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    if (!apibara.options.disableLogs) {\n      apibara.logger.success(`Build succeeded in ${duration}ms`);\n      apibara.logger.info(\n        `You can start the indexers with ${colors.cyan(\"apibara start\")}`,\n      );\n    }\n  } catch (error) {\n    apibara.logger.error(\"Build failed\", error);\n    throw error;\n  }\n}\n","import { getRolldownConfig } from \"apibara/rolldown\";\nimport type { Apibara } from \"apibara/types\";\nimport { colors } from \"consola/utils\";\nimport { watchDev } from \"./dev\";\nimport { buildProduction } from \"./prod\";\n\nexport async function build(apibara: Apibara) {\n  const rolldownConfig = getRolldownConfig(apibara);\n\n  await apibara.hooks.callHook(\"rolldown:before\", apibara, rolldownConfig);\n\n  if (apibara.options.rollupConfig) {\n    apibara.logger.error(\n      `\\n${colors.cyan(\"apibara.config:\")} rollupConfig is deprecated. Use rolldownConfig instead`,\n    );\n    process.exit(1);\n  }\n\n  return apibara.options.dev\n    ? await watchDev(apibara, rolldownConfig)\n    : await buildProduction(apibara, rolldownConfig);\n}\n","import { colors } from \"consola/utils\";\nimport { relative } from \"pathe\";\n\n/** Return a (possibly highlighted) path relative to the current working directory.\n *\n * From nitrojs/nitro.\n */\nexport function prettyPath(path: string, highlight = true) {\n  const rel = relative(process.cwd(), path);\n  return highlight ? colors.cyan(rel) : rel;\n}\n","import fsp from \"node:fs/promises\";\nimport type { Apibara } from \"apibara/types\";\nimport fse from \"fs-extra\";\nimport { prettyPath } from \"../path\";\n\nexport async function prepare(apibara: Apibara) {\n  await prepareDir(apibara.options.buildDir);\n  await prepareDir(apibara.options.outputDir);\n\n  if (!apibara.options.disableLogs) {\n    apibara.logger.success(\n      `Output directory ${prettyPath(apibara.options.outputDir)} cleaned`,\n    );\n  }\n}\n\nasync function prepareDir(dir: string) {\n  await fsp.mkdir(dir, { recursive: true });\n  await fse.emptyDir(dir);\n}\n","import fsp from \"node:fs/promises\";\nimport type { Apibara } from \"apibara/types\";\nimport { dirname, join, resolve } from \"pathe\";\nimport { type JSValue, generateTypes, resolveSchema } from \"untyped\";\nimport { prettyPath } from \"../path\";\n\nexport async function writeTypes(apibara: Apibara) {\n  // Check if the config file has a TypeScript extension so we assume it's a TypeScript project\n  const isTypeScript = apibara.options._c12.configFile?.endsWith(\".ts\");\n\n  if (!isTypeScript) {\n    // If it's not a TypeScript project, we don't need to generate the types\n    return;\n  }\n\n  const typesDir = resolve(apibara.options.buildDir, \"types\");\n\n  const config = [\n    \"// Generated by apibara\",\n    `\ndeclare module \"apibara/types\" {`,\n    apibara.options.typescript.generateRuntimeConfigTypes\n      ? generateTypes(\n          await resolveSchema(\n            Object.fromEntries(\n              Object.entries(apibara.options.runtimeConfig),\n            ) as Record<string, JSValue>,\n          ),\n          {\n            interfaceName: \"ApibaraRuntimeConfig\",\n            addExport: false,\n            addDefaults: false,\n            allowExtraKeys: false,\n            indentation: 2,\n          },\n        )\n      : \"\",\n    \"}\",\n    // Makes this a module for augmentation purposes\n    \"export type {};\",\n  ];\n\n  const buildFiles: { path: string; contents: string }[] = [];\n\n  buildFiles.push({\n    path: join(typesDir, \"apibara-config.d.ts\"),\n    contents: config.join(\"\\n\"),\n  });\n\n  await Promise.all(\n    buildFiles.map(async (file) => {\n      const _file = resolve(apibara.options.buildDir, file.path);\n      await fsp.mkdir(dirname(_file), { recursive: true });\n      await fsp.writeFile(_file, file.contents);\n    }),\n  );\n\n  if (!apibara.options.disableLogs) {\n    apibara.logger.success(`Types written to ${prettyPath(typesDir)}`);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEO,MAAM,eAAiC,GAAA;AAAA,EAC5C,OAAS,EAAA,GAAA;AAAA,EACT,WAAa,EAAA,UAAA;AAAA,EAEb,eAAe,EAAC;AAAA,EAChB,OAAO,EAAC;AAAA,EAER,QAAU,EAAA,UAAA;AAAA,EAEV,UAAY,EAAA;AAAA,IACV,MAAQ,EAAA,KAAA;AAAA,IACR,0BAA4B,EAAA,IAAA;AAAA,IAC5B,aAAe,EAAA,KAAA;AAAA,GACjB;AAAA,EAEA,IAAM,EAAA,IAAA;AAAA,EACN,gBAAA,EAAkB,CAAC,MAAM,CAAA;AAC3B,CAAA;;AChBA,eAAsB,mBAAmB,OAAyB,EAAA;AAChE,EAAA,OAAA,CAAQ,OAAU,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,IAAW,GAAG,CAAA,CAAA;AAEhD,EAAW,KAAA,MAAA,GAAA,IAAO,CAAC,UAAU,CAAY,EAAA;AACvC,IAAA,OAAA,CAAQ,GAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,OAAS,EAAA,OAAA,CAAQ,GAAG,CAAC,CAAA,CAAA;AAAA,GACtD;AAEA,EAAI,IAAA,CAAC,QAAQ,SAAW,EAAA;AACtB,IAAA,OAAA,CAAQ,SAAY,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,EAAS,gBAAgB,CAAA,CAAA;AAAA,GAC/D;AACF;;ACHO,SAAS,sBAAsB,OAAkC,EAAA;AACtE,EAAI,IAAA;AACF,IAAA,MAAM,EAAE,aAAA,EAAe,MAAQ,EAAA,OAAA,EAAY,GAAA,OAAA,CAAA;AAE3C,IAAA,IAAI,aAAe,EAAA;AACjB,MAAA,OAAA,CAAQ,GAAI,CAAA,4BAA4B,CAAI,GAAA,IAAA,CAAK,UAAU,aAAa,CAAA,CAAA;AAAA,KAC1E;AACA,IAAA,IAAI,MAAQ,EAAA;AACV,MAAQ,OAAA,CAAA,GAAA,CAAI,2BAA2B,CAAI,GAAA,MAAA,CAAA;AAAA,KAC7C;AAEA,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,OAAA,CAAQ,GAAI,CAAA,4BAA4B,CAAI,GAAA,IAAA,CAAK,UAAU,OAAO,CAAA,CAAA;AAAA,KACpE;AAEA,IAAA,MAAM,uBAAuB,IAAK,CAAA,KAAA;AAAA,MAChC,OAAA,CAAQ,GAAI,CAAA,+BAA+B,CAAK,IAAA,IAAA;AAAA,KAClD,CAAA;AAGA,IAAQ,OAAA,CAAA,GAAA,CAAI,sCAAsC,CAAA,GAAI,IAAK,CAAA,SAAA;AAAA,MACzD,yBAA0B,CAAA;AAAA,QACxB,MAAA;AAAA,QACA,OAAA;AAAA,QACA,aAAA;AAAA,QACA,oBAAA;AAAA,OACD,CAAA;AAAA,KACH,CAAA;AAAA,WACO,KAAO,EAAA;AACd,IAAM,MAAA,IAAI,MAAM,uDAAyD,EAAA;AAAA,MACvE,KAAO,EAAA,KAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACH;AACF;;AC/BA,MAAM,eAAA,GAAkB,CAAC,kBAAA,EAAoB,qBAAqB,CAAA,CAAA;AAE5C,eAAA,WAAA,CACpB,kBAAiC,EAAC,EAClC,OAA0B,EAAC,EAC3B,MAAM,KACmB,EAAA;AACzB,EAAA,MAAM,OAAU,GAAA,MAAM,eAAgB,CAAA,eAAA,EAAiB,MAAM,GAAG,CAAA,CAAA;AAGhE,EAAI,IAAA;AACF,IAAK,IAAA,CAAA,SAAA,CAAU,QAAQ,aAAa,CAAA,CAAA;AAAA,WAC7B,KAAO,EAAA;AACd,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,2EAAA;AAAA,MACA,EAAE,OAAO,KAAM,EAAA;AAAA,KACjB,CAAA;AAAA,GACF;AAEA,EAAA,KAAA,MAAW,YAAY,eAAiB,EAAA;AACtC,IAAA,MAAM,SAAS,OAAO,CAAA,CAAA;AAAA,GACxB;AAEA,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAEA,eAAe,eAAA,CACb,kBAAiC,EAAC,EAClC,OAA0B,EAAC,EAC3B,MAAM,KACmB,EAAA;AAEzB,EAAA,eAAA,GAAkB,MAAM,eAAe,CAAA,CAAA;AAEvC,EAAA,MAAM,YAAe,GAAA,MAAA,CAAO,IAAK,CAAA,KAAA,GAC7B,cACA,UAA2B,EAAA;AAAA,IAC7B,IAAM,EAAA,SAAA;AAAA,IACN,MAAQ,EAAA,GAAA;AAAA,IACR,KAAK,eAAgB,CAAA,OAAA;AAAA,IACrB,SAAW,EAAA;AAAA,MACT,GAAG,eAAA;AAAA,KACL;AAAA,IACA,QAAA,EAAU,EAAE,GAAG,eAAgB,EAAA;AAAA,IAC/B,GAAG,IAAK,CAAA,GAAA;AAAA,GACT,CAAA,CAAA;AAED,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,YAAA,CAAa,MAAM,CAAA,CAAA;AAEzC,EAAA,OAAA,CAAQ,OAAU,GAAA,eAAA,CAAA;AAClB,EAAA,OAAA,CAAQ,IAAO,GAAA,YAAA,CAAA;AAEf,EAAA,IAAI,GAAK,EAAA;AACP,IAAA,OAAA,CAAQ,GAAM,GAAA,GAAA,CAAA;AAAA,GAChB;AAEA,EAAO,OAAA,OAAA,CAAA;AACT;;AClEsB,eAAA,mBAAA,CACpB,SACA,SACA,EAAA;AAEA,EAAA,qBAAA,CAAsB,SAAS,CAAA,CAAA;AAC/B,EAAQ,OAAA,CAAA,MAAA,CAAO,QAAQ,8BAA8B,CAAA,CAAA;AAErD,EAAM,MAAA,OAAA,CAAQ,KAAM,CAAA,QAAA,CAAS,YAAY,CAAA,CAAA;AAC3C;;ACRA,MAAM,kBAAqB,GAAA,CAAC,aAAe,EAAA,aAAA,EAAe,cAAc,CAAA,CAAA;AAExE,eAAsB,aAAa,OAAkB,EAAA;AACnD,EAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,mBAAmB,CAAA,CAAA;AAExC,EAAA,MAAM,WAAc,GAAA,IAAA;AAAA,IAClB,QAAQ,OAAQ,CAAA,OAAA;AAAA,IAChB,QAAQ,OAAQ,CAAA,WAAA;AAAA,GAClB,CAAA;AAEA,EAAA,IAAI,CAAC,GAAA,CAAI,UAAW,CAAA,WAAW,CAAG,EAAA;AAChC,IAAA,MAAM,IAAI,KAAA,CAAM,CAAiC,8BAAA,EAAA,WAAW,CAAE,CAAA,CAAA,CAAA;AAAA,GAChE;AAEA,EAAA,OAAA,CAAQ,WAAW,EAAC,CAAA;AAEpB,EAAA,KAAA,MAAW,IAAQ,IAAA,GAAA,CAAI,WAAY,CAAA,WAAW,CAAG,EAAA;AAC/C,IAAM,MAAA,WAAA,GAAc,oBAAoB,IAAI,CAAA,CAAA;AAC5C,IAAA,IAAI,WAAa,EAAA;AACf,MAAA,OAAA,CAAQ,SAAS,IAAK,CAAA;AAAA,QACpB,IAAM,EAAA,WAAA;AAAA,QACN,OAAA,EAAS,IAAK,CAAA,WAAA,EAAa,IAAI,CAAA;AAAA,OAChC,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAEA,EAAA,OAAA,CAAQ,OAAO,KAAM,CAAA,CAAA,MAAA,EAAS,OAAQ,CAAA,QAAA,CAAS,MAAM,CAAW,SAAA,CAAA,CAAA,CAAA;AAClE,CAAA;AAEA,SAAS,oBAAoB,IAAc,EAAA;AACzC,EAAA,KAAA,MAAW,aAAa,kBAAoB,EAAA;AAC1C,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,SAAS,CAAG,EAAA;AAC5B,MAAO,OAAA,QAAA,CAAS,MAAM,SAAS,CAAA,CAAA;AAAA,KACjC;AAAA,GACF;AACF;;AC3BsB,eAAA,aAAA,CACpB,SAAwB,EAAC,EACzB,OAA0B,EAAC,EAC3B,MAAM,KACY,EAAA;AAClB,EAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,MAAA,EAAQ,MAAM,GAAG,CAAA,CAAA;AAGnD,EAAQ,OAAA,CAAA,GAAA,CAAI,eAAe,OAAQ,CAAA,GAAA,CAAI,eACnC,CAAG,EAAA,OAAA,CAAQ,GAAI,CAAA,YAAY,CAC3B,qBAAA,CAAA,GAAA,sBAAA,CAAA;AAEJ,EAAA,MAAM,OAAmB,GAAA;AAAA,IACvB,OAAA;AAAA,IACA,UAAU,EAAC;AAAA,IACX,OAAO,WAAY,EAAA;AAAA,IACnB,KAAO,EAAA,MAAM,OAAQ,CAAA,KAAA,CAAM,SAAS,OAAO,CAAA;AAAA,IAC3C,MAAA,EAAQ,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,IACjC,MAAM,aAAa,SAAiC,EAAA;AAClD,MAAA,mBAAA,CAAoB,SAAS,SAAS,CAAA,CAAA;AAAA,KACxC;AAAA,GACF,CAAA;AAEA,EAAA,OAAA,CAAQ,KAAM,CAAA,QAAA,CAAS,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAE5C,EAAA,MAAM,aAAa,OAAO,CAAA,CAAA;AAE1B,EAAO,OAAA,OAAA,CAAA;AACT;;ACrCO,SAAS,oBAAoB,MAA8B,EAAA;AAChE,EAAI,IAAA;AACF,IAAA,MAAM,IAAiB,GAAA,CAAC,MAAO,CAAA,QAAA,EAAU,CAAA,CAAA;AAEzC,IAAA,MAAM,MAAU,GAAA,MAAA,EAAgB,MAAU,IAAA,CAAC,MAA8B,CAAA,CAAA;AACzE,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAA,MAAM,EAAK,GAAA,KAAA,CAAM,IAAQ,IAAA,KAAA,CAAM,MAAO,MAAgC,CAAA,EAAA,CAAA;AACtE,MAAI,IAAA,IAAA,GAAO,WAAW,EAAE,CAAA,GAAI,SAAS,OAAQ,CAAA,GAAA,EAAO,EAAA,EAAE,CAAI,GAAA,EAAA,CAAA;AAC1D,MAAA,MAAM,WAAY,KAA+B,CAAA,GAAA,CAAA;AACjD,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,IAAA,IAAQ,CAAI,CAAA,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,EAAI,SAAS,MAAM,CAAA,CAAA,CAAA;AAAA,OAC9C;AACA,MAAA,MAAM,OAAQ,KAA+B,CAAA,KAAA,CAAA;AAE7C,MAAK,IAAA,CAAA,IAAA;AAAA,QACH,CAAqC,kCAAA,EAAA,IAAI,CAAO,EAAA,CAAA,GAAA,IAAA,GAC5C,SAAS,IACT,GAAA,EAAA;AAAA,OACN,CAAA;AAAA,KACF;AACA,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA,CAAA;AAAA,GACf,CAAA,MAAA;AACN,IAAA,OAAO,QAAQ,QAAS,EAAA,CAAA;AAAA,GAC1B;AACF;;ACnBsB,eAAA,QAAA,CACpB,SACA,cACA,EAAA;AACA,EAAI,IAAA,eAAA,CAAA;AACJ,EAAA,eAAe,IAAO,GAAA;AACpB,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,yBAAyB,CAAA,CAAA;AAC9C,IAAA,IAAI,eAAiB,EAAA;AACnB,MAAA,MAAM,gBAAgB,KAAM,EAAA,CAAA;AAAA,KAC9B;AACA,IAAkB,eAAA,GAAA,oBAAA,CAAqB,SAAS,cAAc,CAAA,CAAA;AAAA,GAChE;AACA,EAAA,MAAM,MAAS,GAAA,QAAA,CAAS,YAAY,MAAM,MAAM,CAAA,CAAA;AAEhD,EAAM,MAAA,aAAA,GAAgB,iBAAiB,OAAO,CAAA,CAAA;AAE9C,EAAM,MAAA,iBAAA,uBAAwB,GAAI,CAAA,CAAC,OAAO,QAAU,EAAA,QAAA,EAAU,WAAW,CAAC,CAAA,CAAA;AAC1E,EAAA,MAAM,gBAAgB,KAAM,CAAA,aAAA,EAAe,EAAE,aAAe,EAAA,IAAA,EAAM,CAAE,CAAA,EAAA;AAAA,IAClE,KAAA;AAAA,IACA,OAAO,KAAU,KAAA;AACf,MAAI,IAAA,iBAAA,CAAkB,GAAI,CAAA,KAAK,CAAG,EAAA;AAChC,QAAA,MAAM,MAAO,EAAA,CAAA;AAAA,OACf;AAAA,KACF;AAAA,GACF,CAAA;AAEA,EAAQ,OAAA,CAAA,KAAA,CAAM,IAAK,CAAA,OAAA,EAAS,MAAM;AAChC,IAAA,eAAA,CAAgB,KAAM,EAAA,CAAA;AACtB,IAAA,aAAA,CAAc,KAAM,EAAA,CAAA;AAAA,GACrB,CAAA,CAAA;AAED,EAAA,OAAA,CAAQ,MAAM,IAAK,CAAA,iBAAA,EAAmB,YAAY,MAAM,QAAQ,CAAA,CAAA;AAEhE,EAAA,MAAM,IAAK,EAAA,CAAA;AACb,CAAA;AAEA,SAAS,oBAAA,CACP,SACA,cACA,EAAA;AACA,EAAM,MAAA,cAAA,GAAiB,kBAAyB,CAAA,CAAA;AAChD,EAAA,MAAM,UAAU,QAAS,CAAA,KAAA;AAAA,IACvB,KAAK,cAAgB,EAAA;AAAA,MACnB,KAAO,EAAA;AAAA,QACL,OAAS,EAAA,cAAA;AAAA,QACT,GAAK,OAAA,CAAQ,OAAQ,CAAA,YAAA,IAAgB,EAAC;AAAA,OACxC;AAAA,KACD,CAAA;AAAA,GACH,CAAA;AACA,EAAI,IAAA,KAAA,CAAA;AAEJ,EAAQ,OAAA,CAAA,EAAA,CAAG,OAAS,EAAA,OAAO,KAAU,KAAA;AACnC,IAAA,QAAQ,MAAM,IAAM;AAAA,MAElB,KAAK,OAAS,EAAA;AACZ,QAAM,MAAA,OAAA,CAAQ,KAAM,CAAA,QAAA,CAAS,aAAa,CAAA,CAAA;AAC1C,QAAA,OAAA;AAAA,OACF;AAAA,MAGA,KAAK,cAAgB,EAAA;AACnB,QAAA,KAAA,GAAQ,KAAK,GAAI,EAAA,CAAA;AACjB,QAAA,OAAA;AAAA,OACF;AAAA,MAGA,KAAK,KAAO,EAAA;AACV,QAAQ,OAAA,CAAA,KAAA,CAAM,QAAS,CAAA,UAAA,EAAY,OAAO,CAAA,CAAA;AAC1C,QAAA,OAAA,CAAQ,MAAO,CAAA,OAAA;AAAA,UACb,gBAAA;AAAA,UACA,QAAQ,CAAM,GAAA,EAAA,IAAA,CAAK,GAAI,EAAA,GAAI,KAAK,CAAQ,GAAA,CAAA,GAAA,EAAA;AAAA,SAC1C,CAAA;AACA,QAAM,MAAA,OAAA,CAAQ,KAAM,CAAA,QAAA,CAAS,YAAY,CAAA,CAAA;AACzC,QAAA,OAAA;AAAA,OACF;AAAA,MAGA,KAAK,OAAS,EAAA;AACZ,QAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,mBAAoB,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAEA,MAAM,gBAAA,GAAmB,CAAC,OAAqB,KAAA;AAAA,EAC7C,IAAK,CAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,EAAS,UAAU,CAAA;AAC1C,CAAA,CAAA;AAEA,MAAM,iBAAA,GAAoB,CAAC,OAAqB,KAAA;AAAA,EAC9C,gBAAA;AAAA,EACA,YAAA;AAAA,EACA,cAAA;AAAA,EACA,oBAAA;AAAA,EACA,YAAA;AAAA,EACA,cAAA;AAAA;AAAA,EAEA,kCAAA;AACF,CAAA;;ACtGsB,eAAA,eAAA,CACpB,SACA,cACA,EAAA;AACA,EAAI,IAAA,CAAC,OAAQ,CAAA,OAAA,CAAQ,WAAa,EAAA;AAChC,IAAA,OAAA,CAAQ,MAAO,CAAA,KAAA;AAAA,MACb,YAAY,MAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,MAAM,CAAC,CAAA,SAAA,CAAA;AAAA,KAClD,CAAA;AAAA,GACF;AAEA,EAAM,MAAA,SAAA,GAAY,KAAK,GAAI,EAAA,CAAA;AAE3B,EAAI,IAAA;AACF,IAAA,MAAM,MAAS,GAAA,MAAM,QAAS,CAAA,QAAA,CAAS,cAAc,CAAA,CAAA;AAErD,IAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,cAAe,CAAA,MAAM,CAAG,EAAA;AACxC,MAAW,KAAA,MAAA,aAAA,IAAiB,eAAe,MAAQ,EAAA;AACjD,QAAM,MAAA,MAAA,CAAO,MAAM,aAAa,CAAA,CAAA;AAAA,OAClC;AAAA,KACF,MAAA,IAAW,eAAe,MAAQ,EAAA;AAChC,MAAM,MAAA,MAAA,CAAO,KAAM,CAAA,cAAA,CAAe,MAAgC,CAAA,CAAA;AAAA,KAC7D,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,gDAAgD,CAAA,CAAA;AAAA,KAClE;AAEA,IAAA,MAAM,OAAO,KAAM,EAAA,CAAA;AAEnB,IAAM,MAAA,OAAA,GAAU,KAAK,GAAI,EAAA,CAAA;AACzB,IAAA,MAAM,WAAW,OAAU,GAAA,SAAA,CAAA;AAE3B,IAAI,IAAA,CAAC,OAAQ,CAAA,OAAA,CAAQ,WAAa,EAAA;AAChC,MAAA,OAAA,CAAQ,MAAO,CAAA,OAAA,CAAQ,CAAsB,mBAAA,EAAA,QAAQ,CAAI,EAAA,CAAA,CAAA,CAAA;AACzD,MAAA,OAAA,CAAQ,MAAO,CAAA,IAAA;AAAA,QACb,CAAmC,gCAAA,EAAA,MAAA,CAAO,IAAK,CAAA,eAAe,CAAC,CAAA,CAAA;AAAA,OACjE,CAAA;AAAA,KACF;AAAA,WACO,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,MAAA,CAAO,KAAM,CAAA,cAAA,EAAgB,KAAK,CAAA,CAAA;AAC1C,IAAM,MAAA,KAAA,CAAA;AAAA,GACR;AACF;;ACtCA,eAAsB,MAAM,OAAkB,EAAA;AAC5C,EAAM,MAAA,cAAA,GAAiB,kBAAkB,OAAO,CAAA,CAAA;AAEhD,EAAA,MAAM,OAAQ,CAAA,KAAA,CAAM,QAAS,CAAA,iBAAA,EAAmB,SAAS,cAAc,CAAA,CAAA;AAEvE,EAAI,IAAA,OAAA,CAAQ,QAAQ,YAAc,EAAA;AAChC,IAAA,OAAA,CAAQ,MAAO,CAAA,KAAA;AAAA,MACb,CAAA;AAAA,EAAK,MAAA,CAAO,IAAK,CAAA,iBAAiB,CAAC,CAAA,uDAAA,CAAA;AAAA,KACrC,CAAA;AACA,IAAA,OAAA,CAAQ,KAAK,CAAC,CAAA,CAAA;AAAA,GAChB;AAEA,EAAO,OAAA,OAAA,CAAQ,OAAQ,CAAA,GAAA,GACnB,MAAM,QAAA,CAAS,OAAS,EAAA,cAAc,CACtC,GAAA,MAAM,eAAgB,CAAA,OAAA,EAAS,cAAc,CAAA,CAAA;AACnD;;ACdgB,SAAA,UAAA,CAAW,IAAc,EAAA,SAAA,GAAY,IAAM,EAAA;AACzD,EAAA,MAAM,GAAM,GAAA,QAAA,CAAS,OAAQ,CAAA,GAAA,IAAO,IAAI,CAAA,CAAA;AACxC,EAAA,OAAO,SAAY,GAAA,MAAA,CAAO,IAAK,CAAA,GAAG,CAAI,GAAA,GAAA,CAAA;AACxC;;ACLA,eAAsB,QAAQ,OAAkB,EAAA;AAC9C,EAAM,MAAA,UAAA,CAAW,OAAQ,CAAA,OAAA,CAAQ,QAAQ,CAAA,CAAA;AACzC,EAAM,MAAA,UAAA,CAAW,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAA,CAAA;AAE1C,EAAI,IAAA,CAAC,OAAQ,CAAA,OAAA,CAAQ,WAAa,EAAA;AAChC,IAAA,OAAA,CAAQ,MAAO,CAAA,OAAA;AAAA,MACb,CAAoB,iBAAA,EAAA,UAAA,CAAW,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAC,CAAA,QAAA,CAAA;AAAA,KAC3D,CAAA;AAAA,GACF;AACF,CAAA;AAEA,eAAe,WAAW,GAAa,EAAA;AACrC,EAAA,MAAM,IAAI,KAAM,CAAA,GAAA,EAAK,EAAE,SAAA,EAAW,MAAM,CAAA,CAAA;AACxC,EAAM,MAAA,GAAA,CAAI,SAAS,GAAG,CAAA,CAAA;AACxB;;ACbA,eAAsB,WAAW,OAAkB,EAAA;AAEjD,EAAA,MAAM,eAAe,OAAQ,CAAA,OAAA,CAAQ,IAAK,CAAA,UAAA,EAAY,SAAS,KAAK,CAAA,CAAA;AAEpE,EAAA,IAAI,CAAC,YAAc,EAAA;AAEjB,IAAA,OAAA;AAAA,GACF;AAEA,EAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQ,UAAU,OAAO,CAAA,CAAA;AAE1D,EAAA,MAAM,MAAS,GAAA;AAAA,IACb,yBAAA;AAAA,IACA,CAAA;AAAA,gCAAA,CAAA;AAAA,IAEA,OAAA,CAAQ,OAAQ,CAAA,UAAA,CAAW,0BACvB,GAAA,aAAA;AAAA,MACE,MAAM,aAAA;AAAA,QACJ,MAAO,CAAA,WAAA;AAAA,UACL,MAAO,CAAA,OAAA,CAAQ,OAAQ,CAAA,OAAA,CAAQ,aAAa,CAAA;AAAA,SAC9C;AAAA,OACF;AAAA,MACA;AAAA,QACE,aAAe,EAAA,sBAAA;AAAA,QACf,SAAW,EAAA,KAAA;AAAA,QACX,WAAa,EAAA,KAAA;AAAA,QACb,cAAgB,EAAA,KAAA;AAAA,QAChB,WAAa,EAAA,CAAA;AAAA,OACf;AAAA,KAEF,GAAA,EAAA;AAAA,IACJ,GAAA;AAAA;AAAA,IAEA,iBAAA;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,aAAmD,EAAC,CAAA;AAE1D,EAAA,UAAA,CAAW,IAAK,CAAA;AAAA,IACd,IAAA,EAAM,IAAK,CAAA,QAAA,EAAU,qBAAqB,CAAA;AAAA,IAC1C,QAAA,EAAU,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA;AAAA,GAC3B,CAAA,CAAA;AAED,EAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,IACZ,UAAA,CAAW,GAAI,CAAA,OAAO,IAAS,KAAA;AAC7B,MAAA,MAAM,QAAQ,OAAQ,CAAA,OAAA,CAAQ,OAAQ,CAAA,QAAA,EAAU,KAAK,IAAI,CAAA,CAAA;AACzD,MAAM,MAAA,GAAA,CAAI,MAAM,OAAQ,CAAA,KAAK,GAAG,EAAE,SAAA,EAAW,MAAM,CAAA,CAAA;AACnD,MAAA,MAAM,GAAI,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,KACzC,CAAA;AAAA,GACH,CAAA;AAEA,EAAI,IAAA,CAAC,OAAQ,CAAA,OAAA,CAAQ,WAAa,EAAA;AAChC,IAAA,OAAA,CAAQ,OAAO,OAAQ,CAAA,CAAA,iBAAA,EAAoB,UAAW,CAAA,QAAQ,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,GACnE;AACF;;;;"}