{"version":3,"file":"index.mjs","sources":["../../src/create/constants.ts","../../src/create/utils.ts","../../src/create/templates.ts","../../src/create/init.ts","../../src/create/add.ts"],"sourcesContent":["import { blue, green, red, yellow } from \"./colors\";\nimport type { Chain, ColorFunc, Network } from \"./types\";\n\nexport type ChainDataType = {\n  name: Chain;\n  display: string;\n  color: ColorFunc;\n  networks: NetworkDataType[];\n};\n\nexport type NetworkDataType = {\n  name: Network;\n  display: string;\n  color: ColorFunc;\n};\n\nexport type LanguageDataType = {\n  name: \"typescript\" | \"javascript\";\n  display: string;\n  color: ColorFunc;\n};\n\nexport type StorageDataType = {\n  name: \"postgres\" | \"none\";\n  display: string;\n  color: ColorFunc;\n};\n\nexport const chains: ChainDataType[] = [\n  {\n    name: \"starknet\",\n    display: \"Starknet\",\n    color: blue,\n    networks: [\n      { name: \"mainnet\", display: \"Mainnet\", color: blue },\n      { name: \"sepolia\", display: \"Sepolia\", color: yellow },\n    ],\n  },\n  {\n    name: \"ethereum\",\n    display: \"Ethereum\",\n    color: green,\n    networks: [\n      { name: \"mainnet\", display: \"Mainnet\", color: blue },\n      { name: \"sepolia\", display: \"Sepolia\", color: yellow },\n    ],\n  },\n  {\n    name: \"beaconchain\",\n    display: \"Beacon Chain\",\n    color: yellow,\n    networks: [{ name: \"mainnet\", display: \"Mainnet\", color: yellow }],\n  },\n];\n\nexport const networks: NetworkDataType[] = [\n  { name: \"mainnet\", display: \"Mainnet\", color: blue },\n  { name: \"sepolia\", display: \"Sepolia\", color: green },\n  { name: \"other\", display: \"Other\", color: red },\n];\n\nexport const storages: StorageDataType[] = [\n  { name: \"postgres\", display: \"Postgres\", color: green },\n  { name: \"none\", display: \"None\", color: red },\n];\n\nexport const packageVersions = {\n  // Required Dependencies\n  apibara: \"next\",\n  \"@apibara/protocol\": \"next\",\n  // Chain Dependencies\n  \"@apibara/evm\": \"next\",\n  \"@apibara/beaconchain\": \"next\",\n  \"@apibara/starknet\": \"next\",\n  // Storage Dependencies\n  \"@apibara/plugin-drizzle\": \"next\",\n  \"@apibara/plugin-mongo\": \"next\",\n  \"@apibara/plugin-sqlite\": \"next\",\n  // Postgres Dependencies\n  \"@electric-sql/pglite\": \"^0.2.17\",\n  \"drizzle-orm\": \"^0.40.1\",\n  pg: \"^8.13.1\",\n  \"@types/pg\": \"^8.11.10\",\n  \"drizzle-kit\": \"^0.29.0\",\n  // Typescript Dependencies\n  typescript: \"^5.6.2\",\n  \"@types/node\": \"^20.5.2\",\n};\n\nexport const dnaUrls = {\n  ethereum: \"https://mainnet.ethereum.a5a.ch\",\n  ethereumSepolia: \"https://sepolia.ethereum.a5a.ch\",\n  beaconchain: \"https://beaconchain.preview.apibara.org\",\n  starknet: \"https://mainnet.starknet.a5a.ch\",\n  starknetSepolia: \"https://sepolia.starknet.a5a.ch\",\n};\n","import fs from \"node:fs\";\nimport path, { basename } from \"node:path\";\nimport * as prettier from \"prettier\";\nimport prompts from \"prompts\";\nimport { blue, cyan, red, yellow } from \"./colors\";\nimport { dnaUrls, networks } from \"./constants\";\nimport type { Chain, FileExtension, Language, Network, PkgInfo } from \"./types\";\n\nexport function isEmpty(path: string) {\n  const files = fs.readdirSync(path);\n  return files.length === 0 || (files.length === 1 && files[0] === \".git\");\n}\nexport function emptyDir(dir: string) {\n  if (!fs.existsSync(dir)) {\n    return;\n  }\n  for (const file of fs.readdirSync(dir)) {\n    if (file === \".git\") {\n      continue;\n    }\n    fs.rmSync(path.resolve(dir, file), { recursive: true, force: true });\n  }\n}\n\nexport function validateLanguage(language?: string, throwError = false) {\n  if (!language) {\n    return false;\n  }\n\n  if (\n    language === \"typescript\" ||\n    language === \"ts\" ||\n    language === \"javascript\" ||\n    language === \"js\" ||\n    language === \"mjs\"\n  ) {\n    return true;\n  }\n\n  if (throwError) {\n    throw new Error(\n      `Invalid language ${cyan(\"(--language | -l)\")}: ${red(language)}. Options: ${blue(\"typescript, ts\")} or ${yellow(\"javascript, js\")} | default: ${cyan(\"typescript\")}`,\n    );\n  }\n\n  return false;\n}\n\nexport function getLanguageFromAlias(alias: string): Language {\n  if (alias === \"ts\" || alias === \"typescript\") {\n    return \"typescript\";\n  }\n  if (alias === \"js\" || alias === \"javascript\" || alias === \"mjs\") {\n    return \"javascript\";\n  }\n\n  throw new Error(\n    `Invalid language ${cyan(\"(--language | -l)\")}: ${red(alias)}. Options: ${blue(\"typescript, ts\")} or ${yellow(\"javascript, js\")}`,\n  );\n}\n\nexport function validateIndexerId(indexerId?: string, throwError = false) {\n  if (!indexerId) {\n    return false;\n  }\n  if (!/^[a-z0-9-]+$/.test(indexerId)) {\n    if (throwError) {\n      throw new Error(\n        `Invalid indexer ID ${cyan(\"(--indexer-id)\")}: ${red(indexerId)}. Indexer ID must contain only lowercase letters, numbers, and hyphens.`,\n      );\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function validateChain(chain?: string, throwError = false) {\n  if (!chain) {\n    return false;\n  }\n  if (chain) {\n    if (chain === \"starknet\" || chain === \"ethereum\" || chain === \"beaconchain\")\n      return true;\n    if (throwError) {\n      throw new Error(\n        `Invalid chain ${cyan(\"(--chain)\")}: ${red(chain)}. Chain must be one of ${blue(\"starknet, ethereum, beaconchain\")}.`,\n      );\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function validateNetwork(\n  chain?: string,\n  network?: string,\n  throwError = false,\n) {\n  if (!network) {\n    return false;\n  }\n\n  if (network === \"other\") {\n    return true;\n  }\n\n  if (chain) {\n    if (chain === \"starknet\") {\n      if (network === \"mainnet\" || network === \"sepolia\") {\n        return true;\n      }\n      if (throwError) {\n        throw new Error(\n          `Invalid network ${cyan(\"(--network)\")}: ${red(network)}. For chain ${blue(\"starknet\")}, network must be one of ${blue(\"mainnet, sepolia, other\")}.`,\n        );\n      }\n      return false;\n    }\n    if (chain === \"ethereum\") {\n      if (network === \"mainnet\" || network === \"goerli\") {\n        return true;\n      }\n      if (throwError) {\n        throw new Error(\n          `Invalid network ${cyan(\"(--network)\")}: ${red(network)}. For chain ${blue(\"ethereum\")}, network must be one of ${blue(\"mainnet, goerli, other\")}.`,\n        );\n      }\n      return false;\n    }\n    if (chain === \"beaconchain\") {\n      if (network === \"mainnet\") {\n        return true;\n      }\n      if (throwError) {\n        throw new Error(\n          `Invalid network ${cyan(\"(--network)\")}: ${red(network)}. For chain ${blue(\"beaconchain\")}, network must be ${blue(\"mainnet, other\")}.`,\n        );\n      }\n      return false;\n    }\n  }\n\n  if (networks.find((n) => n.name === network)) {\n    return true;\n  }\n\n  if (throwError) {\n    throw new Error(\n      `Invalid network ${cyan(\"(--network)\")}: ${red(network)}. Network must be one of ${blue(\"mainnet, sepolia, goerli, other\")}.`,\n    );\n  }\n  return false;\n}\n\nexport function validateStorage(storage?: string, throwError = false) {\n  if (!storage) {\n    return false;\n  }\n  if (storage === \"postgres\" || storage === \"none\") {\n    return true;\n  }\n  if (throwError) {\n    throw new Error(\n      `Invalid storage ${cyan(\"(--storage)\")}: ${red(storage)}. Storage must be one of ${blue(\"postgres, none\")}.`,\n    );\n  }\n  return false;\n}\n\nexport function validateDnaUrl(dnaUrl?: string, throwError = false) {\n  if (!dnaUrl) {\n    return false;\n  }\n  if (!dnaUrl.startsWith(\"https://\") && !dnaUrl.startsWith(\"http://\")) {\n    if (throwError) {\n      throw new Error(\n        `Invalid DNA URL ${cyan(\"(--dna-url)\")}: ${red(dnaUrl)}. DNA URL must start with ${blue(\"https:// or http://\")}.`,\n      );\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function hasApibaraConfig(cwd: string): boolean {\n  const configPathJS = path.join(cwd, \"apibara.config.js\");\n  const configPathTS = path.join(cwd, \"apibara.config.ts\");\n  const configPathMJS = path.join(cwd, \"apibara.config.mjs\");\n\n  return (\n    fs.existsSync(configPathJS) ||\n    fs.existsSync(configPathTS) ||\n    fs.existsSync(configPathMJS)\n  );\n}\n\nexport function getApibaraConfigLanguage(cwd: string): {\n  language: Language;\n  extension: FileExtension;\n} {\n  const configPathJS = path.join(cwd, \"apibara.config.js\");\n  const configPathTS = path.join(cwd, \"apibara.config.ts\");\n  const configPathMJS = path.join(cwd, \"apibara.config.mjs\");\n\n  if (fs.existsSync(configPathMJS)) {\n    return { language: \"javascript\", extension: \"mjs\" };\n  }\n  if (fs.existsSync(configPathJS)) {\n    return { language: \"javascript\", extension: \"js\" };\n  }\n  if (fs.existsSync(configPathTS)) {\n    return { language: \"typescript\", extension: \"ts\" };\n  }\n\n  throw new Error(red(\"✖\") + \" No apibara.config found\");\n}\n\nexport function getDnaUrl(chain: Chain, network: Network) {\n  if (chain === \"ethereum\") {\n    if (network === \"mainnet\") {\n      return dnaUrls.ethereum;\n    }\n    if (network === \"sepolia\") {\n      return dnaUrls.ethereumSepolia;\n    }\n  }\n\n  if (chain === \"beaconchain\") {\n    if (network === \"mainnet\") {\n      return dnaUrls.beaconchain;\n    }\n  }\n\n  if (chain === \"starknet\") {\n    if (network === \"mainnet\") {\n      return dnaUrls.starknet;\n    }\n    if (network === \"sepolia\") {\n      return dnaUrls.starknetSepolia;\n    }\n  }\n\n  throw new Error(red(\"✖\") + \" Invalid chain or network\");\n}\n\n/**\n * Converts a kebab-case string to camelCase.\n *\n * Examples:\n * - \"hello-world\" → \"helloWorld\"\n * - \"my-long-variable-name\" → \"myLongVariableName\"\n * - \"MY-CAPS\" → \"myCaps\"\n * - \"-leading-dash\" → \"leadingDash\"\n * - \"trailing-dash-\" → \"trailingDash\"\n * - \"double--dash\" → \"doubleDash\"\n * - \"hello---world\" → \"helloWorld\"\n * - \"mixed_dash-and_underscore\" → \"mixedDashAndUnderscore\"\n *\n * @param str The kebab-case string to convert\n * @returns The camelCase version of the string\n */\nexport function convertKebabToCamelCase(_str: string): string {\n  let str = _str;\n\n  // Handle empty or invalid input\n  if (!str || typeof str !== \"string\") {\n    return \"\";\n  }\n\n  // Check if already camelCase\n  if (/^[a-z][a-zA-Z0-9]*$/.test(str)) {\n    return str;\n  }\n\n  // Trim leading/trailing dashes and spaces\n  str = str.trim().replace(/^-+|-+$/g, \"\");\n\n  // Handle empty string after trim\n  if (!str) {\n    return \"\";\n  }\n\n  return (\n    str\n      // Replace multiple consecutive dashes/underscores with a single dash\n      .replace(/[-_]+/g, \"-\")\n      // Split on dash\n      .split(\"-\")\n      // Filter out empty strings (from consecutive dashes)\n      .filter(Boolean)\n      // Convert each word\n      .map((word, index) => {\n        // Convert word to lowercase\n        const _word = word.toLowerCase();\n\n        // Capitalize first letter if not the first word\n        if (index > 0) {\n          return _word.charAt(0).toUpperCase() + _word.slice(1);\n        }\n\n        return _word;\n      })\n      .join(\"\")\n  );\n}\n\nexport async function checkFileExists(\n  path: string,\n  options?: {\n    askPrompt?: boolean;\n    fileName?: string;\n    allowIgnore?: boolean;\n  },\n): Promise<{\n  exists: boolean;\n  overwrite: boolean;\n}> {\n  const { askPrompt = false, fileName, allowIgnore = false } = options ?? {};\n\n  if (!fs.existsSync(path)) {\n    return {\n      exists: false,\n      overwrite: false,\n    };\n  }\n\n  if (askPrompt) {\n    const { overwrite } = await prompts({\n      type: \"select\",\n      name: \"overwrite\",\n      message: `${fileName ?? basename(path)} already exists. Please choose how to proceed:`,\n      initial: 0,\n      choices: [\n        ...(allowIgnore\n          ? [\n              {\n                title: \"Keep original file\",\n                value: \"ignore\",\n              },\n            ]\n          : []),\n        {\n          title: \"Cancel operation\",\n          value: \"no\",\n        },\n        {\n          title: \"Overwrite file\",\n          value: \"yes\",\n        },\n      ],\n    });\n\n    if (overwrite === \"no\") {\n      cancelOperation();\n    }\n\n    if (overwrite === \"ignore\") {\n      return {\n        exists: true,\n        overwrite: false,\n      };\n    }\n\n    return {\n      exists: true,\n      overwrite: true,\n    };\n  }\n\n  return {\n    exists: true,\n    overwrite: false,\n  };\n}\n\nexport function cancelOperation(message?: string) {\n  throw new Error(red(\"✖\") + (message ?? \" Operation cancelled\"));\n}\n\nexport function getPackageManager(): PkgInfo {\n  const userAgent = process.env.npm_config_user_agent;\n  const pkgInfo = pkgFromUserAgent(userAgent);\n  if (pkgInfo) {\n    return pkgInfo;\n  }\n  return {\n    name: \"npm\",\n  };\n}\n\n/**\n \nhttps://github.com/vitejs/vite/blob/07091a1e804e5934208ef0b6324a04317dd0d815/packages/create-vite/src/index.ts#L585\n\nMIT License\n\nCopyright (c) 2019-present, VoidZero Inc. and Vite contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n */\nfunction pkgFromUserAgent(userAgent: string | undefined): PkgInfo | undefined {\n  if (!userAgent) return undefined;\n  const pkgSpec = userAgent.split(\" \")[0];\n  const pkgSpecArr = pkgSpec.split(\"/\");\n  return {\n    name: pkgSpecArr[0],\n    version: pkgSpecArr[1],\n  };\n}\n\nexport async function formatFile(path: string) {\n  const file = fs.readFileSync(path, \"utf8\");\n  const formatted = await prettier.format(file, {\n    filepath: path,\n    tabWidth: 2,\n  });\n  fs.writeFileSync(path, formatted);\n}\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { consola } from \"consola\";\nimport prompts from \"prompts\";\nimport { type ObjectLiteralExpression, Project, SyntaxKind } from \"ts-morph\";\nimport { cyan, green, magenta, yellow } from \"./colors\";\nimport { packageVersions } from \"./constants\";\nimport type { IndexerOptions } from \"./types\";\nimport { checkFileExists, formatFile, getDnaUrl } from \"./utils\";\n\nexport function generatePackageJson(isTypeScript: boolean) {\n  return {\n    name: \"apibara-app\",\n    version: \"0.1.0\",\n    private: true,\n    type: \"module\",\n    scripts: {\n      ...(isTypeScript && { prepare: \"apibara prepare\" }),\n      dev: \"apibara dev\",\n      start: \"apibara start\",\n      build: \"apibara build\",\n      ...(isTypeScript && { typecheck: \"tsc --noEmit\" }),\n    },\n    dependencies: {\n      \"@apibara/protocol\": packageVersions[\"@apibara/protocol\"],\n      apibara: packageVersions.apibara,\n    },\n    devDependencies: {\n      ...(isTypeScript && {\n        \"@types/node\": packageVersions[\"@types/node\"],\n        typescript: packageVersions.typescript,\n      }),\n    },\n  };\n}\n\nexport function generateTsConfig() {\n  return {\n    $schema: \"https://json.schemastore.org/tsconfig\",\n    display: \"Default\",\n    compilerOptions: {\n      forceConsistentCasingInFileNames: true,\n      target: \"ES2022\",\n      lib: [\"ESNext\"],\n      module: \"ESNext\",\n      moduleResolution: \"bundler\",\n      skipLibCheck: true,\n      types: [\"node\"],\n      noEmit: true,\n      strict: true,\n      baseUrl: \".\",\n    },\n    include: [\".\", \"./.apibara/types\"],\n    exclude: [\"node_modules\"],\n  };\n}\n\nexport function generateApibaraConfig(isTypeScript: boolean) {\n  return `import { defineConfig } from \"apibara/config\";\n\nexport default defineConfig({\n  runtimeConfig: {},\n});\\n`;\n}\n\nexport function generateIndexer({\n  indexerId,\n  storage,\n  chain,\n  language,\n}: IndexerOptions) {\n  return `import { defineIndexer } from \"apibara/indexer\";\nimport { useLogger } from \"apibara/plugins\";\n${storage === \"postgres\" ? `import { drizzleStorage } from \"@apibara/plugin-drizzle\";` : \"\"}\n${storage === \"postgres\" ? `import { drizzle } from \"@apibara/plugin-drizzle\";` : \"\"}\n${\n  chain === \"ethereum\"\n    ? `import { EvmStream } from \"@apibara/evm\";`\n    : chain === \"beaconchain\"\n      ? `import { BeaconChainStream } from \"@apibara/beaconchain\";`\n      : chain === \"starknet\"\n        ? `import { StarknetStream } from \"@apibara/starknet\";`\n        : \"\"\n}\n${language === \"typescript\" ? `import type { ApibaraRuntimeConfig } from \"apibara/types\";` : \"\"}\n${storage === \"postgres\" ? `import * as schema from \"../lib/schema\";` : \"\"}\n\n\nexport default function (runtimeConfig${language === \"typescript\" ? \": ApibaraRuntimeConfig\" : \"\"}) {\n  const { startingBlock, streamUrl } = runtimeConfig[\"${indexerId}\"];\n  ${\n    storage === \"postgres\"\n      ? `const db = drizzle({\n    schema,\n  });`\n      : \"\"\n  }\n\n  return defineIndexer(${\n    chain === \"ethereum\"\n      ? \"EvmStream\"\n      : chain === \"beaconchain\"\n        ? \"BeaconChainStream\"\n        : chain === \"starknet\"\n          ? \"StarknetStream\"\n          : \"\"\n  })({\n    streamUrl,\n    finality: \"accepted\",\n    startingBlock: BigInt(startingBlock),\n    filter: {\n      ${chain === \"ethereum\" ? \"logs: [],\" : chain === \"starknet\" ? \"events:  [],\" : \"\"}\n    },\n    plugins: [${storage === \"postgres\" ? \"drizzleStorage({ db, migrate: { migrationsFolder: './drizzle' } })\" : \"\"}],\n    async transform({ endCursor, finality }) {\n      const logger = useLogger();\n\n      logger.info(\n        \"Transforming block | orderKey: \",\n        endCursor?.orderKey,\n        \" | finality: \",\n        finality\n      );\n\n      ${\n        storage === \"postgres\"\n          ? `// Example snippet to insert data into db using drizzle with postgres\n      // const { db: database } = useDrizzleStorage();\n\n      // await database.insert(schema.cursorTable).values({\n      //   endCursor: Number(endCursor?.orderKey),\n      //   uniqueKey: \\`\\${endCursor?.uniqueKey}\\`,\n      // });`\n          : \"\"\n      }\n    },\n  });\n}   \n`;\n}\n\nexport async function createIndexerFile(options: IndexerOptions) {\n  const indexerFilePath = path.join(\n    options.cwd,\n    \"indexers\",\n    `${options.indexerFileId}.indexer.${options.extension}`,\n  );\n\n  const { exists, overwrite } = await checkFileExists(indexerFilePath, {\n    askPrompt: true,\n  });\n\n  if (exists && !overwrite) return;\n\n  const indexerContent = generateIndexer(options);\n\n  fs.mkdirSync(path.dirname(indexerFilePath), { recursive: true });\n  fs.writeFileSync(indexerFilePath, indexerContent);\n\n  await formatFile(indexerFilePath);\n}\n\nexport async function updatePackageJson({\n  cwd,\n  chain,\n  storage,\n  language,\n}: IndexerOptions) {\n  const packageJsonPath = path.join(cwd, \"package.json\");\n\n  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\n\n  if (chain === \"ethereum\") {\n    packageJson.dependencies[\"@apibara/evm\"] = packageVersions[\"@apibara/evm\"];\n  } else if (chain === \"beaconchain\") {\n    packageJson.dependencies[\"@apibara/beaconchain\"] =\n      packageVersions[\"@apibara/beaconchain\"];\n  } else if (chain === \"starknet\") {\n    packageJson.dependencies[\"@apibara/starknet\"] =\n      packageVersions[\"@apibara/starknet\"];\n  }\n\n  if (storage === \"postgres\") {\n    packageJson.scripts[\"drizzle:generate\"] = \"drizzle-kit generate\";\n    packageJson.scripts[\"drizzle:migrate\"] = \"drizzle-kit migrate\";\n\n    packageJson.dependencies[\"@apibara/plugin-drizzle\"] =\n      packageVersions[\"@apibara/plugin-drizzle\"];\n\n    packageJson.dependencies[\"drizzle-orm\"] = packageVersions[\"drizzle-orm\"];\n\n    packageJson.dependencies[\"@electric-sql/pglite\"] =\n      packageVersions[\"@electric-sql/pglite\"];\n\n    packageJson.dependencies[\"drizzle-kit\"] = packageVersions[\"drizzle-kit\"];\n\n    packageJson.dependencies[\"pg\"] = packageVersions[\"pg\"];\n\n    if (language === \"typescript\") {\n      packageJson.devDependencies[\"@types/pg\"] = packageVersions[\"@types/pg\"];\n    }\n  }\n\n  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n\n  await formatFile(packageJsonPath);\n}\n\nexport async function updateApibaraConfigFile({\n  indexerId,\n  cwd,\n  chain,\n  storage,\n  language,\n  network,\n  dnaUrl,\n  extension,\n}: IndexerOptions) {\n  const pathToConfig = path.join(cwd, `apibara.config.${extension}`);\n\n  const runtimeConfigString = `{\n  startingBlock: 0,\n  streamUrl: \"${dnaUrl ?? getDnaUrl(chain, network)}\"  \n}`;\n\n  const project = new Project();\n  const sourceFile = project.addSourceFileAtPath(pathToConfig);\n\n  // Find the defineConfig call expression\n  const defineConfigCall = sourceFile.getFirstDescendantByKind(\n    SyntaxKind.CallExpression,\n  );\n  if (!defineConfigCall) return;\n\n  const configObjectExpression =\n    defineConfigCall.getArguments()[0] as ObjectLiteralExpression;\n\n  const runtimeConfigObject =\n    configObjectExpression.getProperty(\"runtimeConfig\");\n\n  if (!runtimeConfigObject) {\n    configObjectExpression.addPropertyAssignment({\n      name: \"runtimeConfig\",\n      initializer: `{\n  \"${indexerId}\": ${runtimeConfigString}\n}`,\n    });\n  } else {\n    const runtimeConfigProp = runtimeConfigObject.asKindOrThrow(\n      SyntaxKind.PropertyAssignment,\n    );\n    const runtimeConfigObj = runtimeConfigProp\n      .getInitializerOrThrow()\n      .asKindOrThrow(SyntaxKind.ObjectLiteralExpression);\n\n    runtimeConfigObj.addPropertyAssignment({\n      name: `\"${indexerId}\"`,\n      initializer: runtimeConfigString,\n    });\n  }\n  // Save the changes\n  sourceFile.saveSync();\n\n  await formatFile(pathToConfig);\n}\n\nexport async function createDrizzleStorageFiles(options: IndexerOptions) {\n  const {\n    cwd,\n    language,\n    storage,\n    indexerId,\n    extension: fileExtension,\n  } = options;\n\n  if (storage !== \"postgres\") return;\n\n  /**\n   *\n   *\n   * Drizzle Config File\n   *\n   *\n   */\n\n  const drizzleConfigFileName = `drizzle.config.${fileExtension}`;\n\n  // create drizzle.config.ts\n  const drizzleConfigPath = path.join(cwd, drizzleConfigFileName);\n\n  const { exists, overwrite } = await checkFileExists(drizzleConfigPath, {\n    askPrompt: true,\n    allowIgnore: true,\n  });\n\n  if (!exists || overwrite) {\n    const drizzleConfigContent = `${language === \"typescript\" ? 'import type { Config } from \"drizzle-kit\";' : \"\"}\n\nexport default {\n  schema: \"./lib/schema.${fileExtension}\",\n  out: \"./drizzle\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env[\"POSTGRES_CONNECTION_STRING\"] ?? \"memory://${indexerId}\",\n  },\n}${language === \"typescript\" ? \" satisfies Config\" : \"\"};`;\n\n    fs.writeFileSync(drizzleConfigPath, drizzleConfigContent);\n\n    await formatFile(drizzleConfigPath);\n\n    consola.success(`Created ${cyan(drizzleConfigFileName)}`);\n  }\n\n  /**\n   *\n   *\n   * Schema File\n   *\n   *\n   */\n\n  const schemaFileName = `schema.${fileExtension}`;\n\n  const schemaPath = path.join(cwd, \"lib\", schemaFileName);\n\n  const { exists: schemaExists, overwrite: schemaOverwrite } =\n    await checkFileExists(schemaPath, {\n      askPrompt: true,\n      allowIgnore: true,\n      fileName: `lib/${schemaFileName}`,\n    });\n\n  if (!schemaExists || schemaOverwrite) {\n    const schemaContent = `//  --- Add your pg table schemas here ----\n\n// import { bigint, pgTable, text, uuid } from \"drizzle-orm/pg-core\";\n\n// export const cursorTable = pgTable(\"cursor_table\", {\n//   id: uuid(\"id\").primaryKey().defaultRandom(),\n//   endCursor: bigint(\"end_cursor\", { mode: \"number\" }),\n//   uniqueKey: text(\"unique_key\"),\n// });\n\nexport {};\n  `;\n\n    // create directory if it doesn't exist\n    fs.mkdirSync(path.dirname(schemaPath), { recursive: true });\n    fs.writeFileSync(schemaPath, schemaContent);\n\n    await formatFile(schemaPath);\n\n    consola.success(`Created ${cyan(`lib/${schemaFileName}`)}`);\n  }\n\n  console.log(\"\\n\");\n\n  // If schema file is created, show the example\n  if (!schemaExists || schemaOverwrite) {\n    consola.info(\n      `Make sure to export your pgTables in ${cyan(`lib/${schemaFileName}`)}`,\n    );\n\n    console.log();\n\n    consola.info(`${magenta(\"Example:\")}\n    \n${yellow(`\n┌──────────────────────────────────────────┐\n│               lib/schema                 │\n└──────────────────────────────────────────┘\n\nimport { bigint, pgTable, text, uuid } from \"drizzle-orm/pg-core\";\n\nexport const cursorTable = pgTable(\"cursor_table\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  endCursor: bigint(\"end_cursor\", { mode: \"number\" }),\n  uniqueKey: text(\"unique_key\"),\n});`)}`);\n\n    console.log(\"\\n\");\n  }\n\n  consola.info(\n    `Run ${green(`${options.packageManager}${options.packageManager === \"npm\" ? \" run\" : \"\"} drizzle:generate`)} & ${green(`${options.packageManager}${options.packageManager === \"npm\" ? \" run\" : \"\"} drizzle:migrate`)} to generate and apply migrations.`,\n  );\n}\n\nexport async function createStorageRelatedFiles(options: IndexerOptions) {\n  const { storage } = options;\n\n  if (storage === \"postgres\") {\n    await createDrizzleStorageFiles(options);\n  }\n}\n\nconst gitIgnoreItems: {\n  isRecommended: boolean;\n  description?: string;\n  value: string;\n}[] = [\n  {\n    isRecommended: false,\n    value: \"node_modules\",\n  },\n  {\n    isRecommended: false,\n    value: \"dist\",\n  },\n  {\n    isRecommended: true,\n    description: \"build and dev files of apibara\",\n    value: \".apibara\",\n  },\n  {\n    isRecommended: false,\n    value: \".env\",\n  },\n  {\n    isRecommended: false,\n    description: \"for mac users\",\n    value: \".DS_Store\",\n  },\n];\n\nexport async function createGitIgnoreFile(cwd: string) {\n  const gitIgnorePath = path.join(cwd, \".gitignore\");\n\n  if (fs.existsSync(gitIgnorePath)) {\n    const result = await prompts([\n      {\n        type: \"select\",\n        name: \"overwrite\",\n        message: `${cyan(\".gitignore\")} already exists. Please choose how to proceed:`,\n        initial: 0,\n        choices: [\n          {\n            title: \"Choose items to append in your .gitignore\",\n            value: \"append\",\n          },\n          {\n            title: \"Keep original\",\n            value: \"ignore\",\n          },\n          {\n            title: \"Overwrite\",\n            value: \"overwrite\",\n          },\n        ],\n      },\n      {\n        type: (overwrite: \"append\" | \"ignore\" | \"overwrite\") =>\n          overwrite === \"append\" ? \"multiselect\" : null,\n        name: \"ignoreItems\",\n        message: \"Choose items to append in your .gitignore\",\n        choices: gitIgnoreItems.map((item) => ({\n          title: `${yellow(item.value)}${\n            item.description ? ` - ${item.description}` : \"\"\n          }${item.isRecommended ? ` ${green(\"(recommended)\")}` : \"\"}`,\n          value: item.value,\n        })),\n      },\n    ]);\n\n    const { overwrite, ignoreItems } = result as {\n      overwrite: \"append\" | \"ignore\" | \"overwrite\";\n      ignoreItems: string[];\n    };\n\n    if (overwrite === \"append\" && ignoreItems.length > 0) {\n      const gitIgnoreContent = fs.readFileSync(gitIgnorePath, \"utf8\");\n      fs.writeFileSync(\n        gitIgnorePath,\n        `${gitIgnoreContent}\\n${result.ignoreItems.join(\"\\n\")}`,\n      );\n      consola.success(`Updated ${cyan(\".gitignore\")}`);\n      return;\n    }\n\n    if (overwrite === \"overwrite\") {\n      fs.writeFileSync(\n        gitIgnorePath,\n        gitIgnoreItems.map((item) => item.value).join(\"\\n\"),\n      );\n      consola.success(`Updated ${cyan(\".gitignore\")}`);\n      return;\n    }\n  }\n\n  fs.writeFileSync(\n    gitIgnorePath,\n    gitIgnoreItems.map((item) => item.value).join(\"\\n\"),\n  );\n  consola.success(`Created ${cyan(\".gitignore\")}`);\n}\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport consola from \"consola\";\nimport prompts from \"prompts\";\nimport { addIndexer } from \"./add\";\nimport { cyan, green } from \"./colors\";\nimport {\n  createGitIgnoreFile,\n  generateApibaraConfig,\n  generatePackageJson,\n  generateTsConfig,\n} from \"./templates\";\nimport type { Language } from \"./types\";\nimport {\n  cancelOperation,\n  emptyDir,\n  formatFile,\n  getLanguageFromAlias,\n  getPackageManager,\n  isEmpty,\n  validateLanguage,\n} from \"./utils\";\n\ntype Options = {\n  argTargetDir: string;\n  argLanguage?: string;\n  argNoCreateIndexer?: boolean;\n};\n\nexport async function initializeProject({\n  argTargetDir,\n  argLanguage,\n  argNoCreateIndexer,\n}: Options) {\n  const cwd = process.cwd();\n  validateLanguage(argLanguage, true);\n\n  console.log();\n\n  const result = await prompts(\n    [\n      {\n        type: () =>\n          argTargetDir &&\n          (!fs.existsSync(argTargetDir) || isEmpty(argTargetDir))\n            ? null\n            : \"select\",\n        name: \"overwrite\",\n        message: () =>\n          (argTargetDir === \".\"\n            ? \"Current directory\"\n            : `Target directory \"${argTargetDir}\"`) +\n          \" is not empty. Please choose how to proceed:\",\n        initial: 0,\n        choices: [\n          {\n            title: \"Cancel operation\",\n            value: \"no\",\n          },\n          {\n            title: \"Remove existing files and continue\",\n            value: \"yes\",\n          },\n          {\n            title: \"Ignore files and continue\",\n            value: \"ignore\",\n          },\n        ],\n        hint: \"\\nCurrent Working Directory: \" + cwd,\n      },\n      {\n        type: (_, { overwrite }: { overwrite?: string }) => {\n          if (overwrite === \"no\") {\n            cancelOperation();\n          }\n          return null;\n        },\n        name: \"overwriteChecker\",\n      },\n      {\n        type: argLanguage ? null : \"select\",\n        name: \"prompt_language\",\n        message: \"Select a language:\",\n        choices: [\n          {\n            title: \"Typescript\",\n            value: \"typescript\",\n          },\n          {\n            title: \"Javascript\",\n            value: \"javascript\",\n          },\n        ],\n      },\n    ],\n    {\n      onCancel: () => {\n        cancelOperation();\n      },\n    },\n  );\n\n  const { overwrite, prompt_language } = result as {\n    overwrite: \"no\" | \"yes\" | \"ignore\";\n    prompt_language: \"typescript\" | \"javascript\";\n  };\n\n  const root = path.join(cwd, argTargetDir);\n  if (overwrite === \"yes\") {\n    emptyDir(root);\n  } else if (!fs.existsSync(root)) {\n    fs.mkdirSync(root, { recursive: true });\n  }\n\n  const lang: Language = argLanguage\n    ? getLanguageFromAlias(argLanguage)\n    : prompt_language;\n\n  const isTs = lang === \"typescript\";\n  const configExt = isTs ? \"ts\" : \"js\";\n\n  console.log(\"\\n\");\n  consola.info(`Initializing project in ${argTargetDir}\\n\\n`);\n\n  // Generate package.json\n  const packageJsonPath = path.join(root, \"package.json\");\n  const packageJson = generatePackageJson(isTs);\n  fs.writeFileSync(\n    packageJsonPath,\n    JSON.stringify(packageJson, null, 2) + \"\\n\",\n  );\n  await formatFile(packageJsonPath);\n  consola.success(\"Created\", cyan(\"package.json\"));\n\n  // Generate tsconfig.json if TypeScript\n  if (isTs) {\n    const tsConfigPath = path.join(root, \"tsconfig.json\");\n    const tsConfig = generateTsConfig();\n    fs.writeFileSync(tsConfigPath, JSON.stringify(tsConfig, null, 2) + \"\\n\");\n    await formatFile(tsConfigPath);\n    consola.success(\"Created\", cyan(\"tsconfig.json\"));\n  }\n\n  const apibaraConfigPath = path.join(root, `apibara.config.${configExt}`);\n  // Generate apibara.config\n  const apibaraConfig = generateApibaraConfig(isTs);\n  fs.writeFileSync(apibaraConfigPath, apibaraConfig);\n  await formatFile(apibaraConfigPath);\n  consola.success(\"Created\", cyan(`apibara.config.${configExt}`));\n\n  // Create \"indexers\" directory if not exists\n  const indexersDir = path.join(root, \"indexers\");\n  if (!fs.existsSync(indexersDir)) {\n    fs.mkdirSync(indexersDir, { recursive: true });\n    consola.success(`Created ${cyan(\"indexers\")} directory`);\n  }\n\n  await createGitIgnoreFile(root);\n\n  console.log(\"\\n\");\n\n  consola.ready(green(\"Project initialized successfully\"));\n\n  console.log();\n\n  if (!argNoCreateIndexer) {\n    consola.info(\"Let's create an indexer\\n\");\n\n    await addIndexer({ argRootDir: argTargetDir });\n  } else {\n    const pkgManager = getPackageManager();\n    consola.info(\n      \"Run \",\n      green(`${pkgManager.name} install`),\n      \" to install all dependencies\",\n    );\n  }\n}\n","import path from \"node:path\";\nimport consola from \"consola\";\nimport prompts from \"prompts\";\nimport { cyan, red, reset } from \"./colors\";\nimport {\n  type ChainDataType,\n  type NetworkDataType,\n  type StorageDataType,\n  chains,\n  storages,\n} from \"./constants\";\nimport { initializeProject } from \"./init\";\nimport {\n  createIndexerFile,\n  createStorageRelatedFiles,\n  updateApibaraConfigFile,\n  updatePackageJson,\n} from \"./templates\";\nimport type { Chain, IndexerOptions, Network, Storage } from \"./types\";\nimport {\n  cancelOperation,\n  checkFileExists,\n  convertKebabToCamelCase,\n  getApibaraConfigLanguage,\n  getPackageManager,\n  hasApibaraConfig,\n  validateChain,\n  validateDnaUrl,\n  validateIndexerId,\n  validateNetwork,\n  validateStorage,\n} from \"./utils\";\n\ntype Options = {\n  argIndexerId?: string;\n  argChain?: string;\n  argNetwork?: string;\n  argStorage?: string;\n  argDnaUrl?: string;\n  argRootDir?: string;\n};\n\nexport async function addIndexer({\n  argIndexerId,\n  argChain,\n  argNetwork,\n  argStorage,\n  argDnaUrl,\n  argRootDir,\n}: Options) {\n  const cwd = path.join(process.cwd(), argRootDir ?? \".\");\n  const configExists = hasApibaraConfig(cwd);\n\n  if (!configExists) {\n    consola.error(\"No apibara.config found in the current directory.\");\n\n    const prompt_initialize = await prompts({\n      type: \"confirm\",\n      name: \"prompt_initialize\",\n      message: reset(\n        \"Do you want to initialize a apibara project here before adding an indexer?\",\n      ),\n    });\n\n    if (prompt_initialize.prompt_initialize) {\n      await initializeProject({\n        argTargetDir: process.cwd(),\n        argNoCreateIndexer: true,\n      });\n    } else {\n      consola.info(\n        `Initialize a project with ${cyan(\"apibara init\")} before adding an indexer`,\n      );\n      throw new Error(\n        red(\"✖\") + \" Operation cancelled: No apibara.config found\",\n      );\n    }\n  }\n\n  const { language, extension } = getApibaraConfigLanguage(cwd);\n\n  validateIndexerId(argIndexerId, true);\n  validateChain(argChain, true);\n  validateNetwork(argChain, argNetwork, true);\n  validateStorage(argStorage, true);\n  validateDnaUrl(argDnaUrl, true);\n\n  const result = await prompts(\n    [\n      {\n        type: argIndexerId ? null : \"text\",\n        name: \"prompt_indexerId\",\n        message: reset(\"Indexer ID:\"),\n        initial: argIndexerId ?? \"my-indexer\",\n        validate: (id) =>\n          validateIndexerId(id)\n            ? checkFileExists(\n                path.join(cwd, \"indexers\", `${id}.indexer.${extension}`),\n              ).then(({ exists }) =>\n                exists\n                  ? `Indexer ${cyan(`${id}.indexer.${extension}`)} already exists`\n                  : true,\n              )\n            : \"Invalid indexer ID, it cannot be empty and must be in kebab-case format\",\n      },\n      {\n        type: argChain ? null : \"select\",\n        name: \"prompt_chain\",\n        message: reset(\"Select a chain:\"),\n        choices: chains.map((chain) => ({\n          title: chain.color(chain.display),\n          value: chain,\n        })),\n      },\n      {\n        type: argNetwork ? null : \"select\",\n        name: \"prompt_network\",\n        message: reset(\"Select a network:\"),\n        choices: (chain: ChainDataType | undefined) => [\n          ...(\n            chain?.networks ??\n            chains.find((c) => c.name === argChain)?.networks ??\n            []\n          ).map((network) => ({\n            title: network.color(network.display),\n            value: network,\n          })),\n          {\n            title: cyan(\"Other\"),\n            value: {\n              color: cyan,\n              display: \"Other\",\n              name: \"other\",\n            } as NetworkDataType,\n          },\n        ],\n      },\n      {\n        type: (network: NetworkDataType | undefined) => {\n          if (network || argNetwork) {\n            return network?.name === \"other\" || argNetwork === \"other\"\n              ? \"text\"\n              : null;\n          }\n          return null;\n        },\n        name: \"prompt_dnaUrl\",\n        message: reset(\"Enter a DNA URL:\"),\n        validate: (url) => validateDnaUrl(url) || \"Provide a valid DNA Url\",\n      },\n      {\n        type: argStorage ? null : \"select\",\n        name: \"prompt_storage\",\n        message: reset(\"Select a storage:\"),\n        choices: storages.map((storage) => ({\n          title: storage.color(storage.display),\n          value: storage,\n        })),\n      },\n    ],\n    {\n      onCancel: () => {\n        cancelOperation();\n      },\n    },\n  );\n\n  const {\n    prompt_indexerId,\n    prompt_chain,\n    prompt_network,\n    prompt_storage,\n    prompt_dnaUrl,\n  } = result as {\n    prompt_indexerId: string | undefined;\n    prompt_chain: ChainDataType | undefined;\n    prompt_network: NetworkDataType | undefined;\n    prompt_storage: StorageDataType | undefined;\n    prompt_dnaUrl: string | undefined;\n  };\n\n  if (!argIndexerId && !prompt_indexerId) {\n    throw new Error(red(\"✖\") + \" Indexer ID is required\");\n  }\n\n  if (!argChain && !prompt_chain) {\n    throw new Error(red(\"✖\") + \" Chain is required\");\n  }\n\n  if (!argNetwork && !prompt_network) {\n    throw new Error(red(\"✖\") + \" Network is required\");\n  }\n\n  const indexerFileId = argIndexerId! ?? prompt_indexerId!;\n\n  const pkgManager = getPackageManager();\n\n  const options: IndexerOptions = {\n    cwd: cwd,\n    indexerFileId,\n    indexerId: convertKebabToCamelCase(indexerFileId),\n    chain: (argChain as Chain) ?? prompt_chain?.name!,\n    network: (argNetwork as Network) ?? prompt_network?.name!,\n    storage: (argStorage as Storage) ?? prompt_storage?.name!,\n    dnaUrl: argDnaUrl ?? prompt_dnaUrl,\n    language,\n    packageManager: pkgManager.name,\n    extension,\n  };\n\n  await updateApibaraConfigFile(options);\n\n  consola.success(`Updated ${cyan(`apibara.config.${extension}`)}`);\n\n  await updatePackageJson(options);\n\n  consola.success(`Updated ${cyan(\"package.json\")}`);\n\n  await createIndexerFile(options);\n\n  consola.success(`Created ${cyan(`${indexerFileId}.indexer.${extension}`)}`);\n\n  await createStorageRelatedFiles(options);\n\n  console.log();\n\n  const baseCommand = `${options.packageManager} install`;\n  const tsCommand = `${baseCommand} && ${options.packageManager} run prepare`;\n  consola.info(\n    `Before running the indexer, run ${cyan(language === \"typescript\" ? tsCommand : baseCommand)}`,\n  );\n}\n"],"names":["path","overwrite","consola"],"mappings":"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"}