{"version":3,"file":"index.mjs","sources":["../../src/common/constants.ts","../../src/common/helper.ts","../../src/common/cli.ts"],"sourcesContent":["export const ENV_INTERNAL_APIBARA_RUNTIME = \"_APIBARA_RUNTIME\";\nexport const ENV_INTERNAL_APIBARA_PRESET = \"_APIBARA_PRESET\";\nexport const ENV_INTERNAL_APIBARA_PRESETS = \"_APIBARA_PRESETS\";\nexport const ENV_INTERNAL_APIBARA_PROCESSED_RUNTIME =\n  \"_APIBARA_PROCESSED_RUNTIME\";\nexport const USER_ENV_APIBARA_RUNTIME_CONFIG = \"APIBARA_RUNTIME_CONFIG\";\n","import defu from \"defu\";\nimport {\n  ENV_INTERNAL_APIBARA_PRESET,\n  ENV_INTERNAL_APIBARA_PRESETS,\n  ENV_INTERNAL_APIBARA_PROCESSED_RUNTIME,\n  ENV_INTERNAL_APIBARA_RUNTIME,\n  USER_ENV_APIBARA_RUNTIME_CONFIG,\n} from \"./constants\";\n\nexport function getRuntimeDataFromEnv() {\n  const processedRuntimeConfig: Record<string, unknown> = JSON.parse(\n    process.env[ENV_INTERNAL_APIBARA_PROCESSED_RUNTIME] ?? \"{}\",\n  );\n  const preset: string | undefined = process.env[ENV_INTERNAL_APIBARA_PRESET];\n  const presets: Record<string, unknown> | undefined = JSON.parse(\n    process.env[ENV_INTERNAL_APIBARA_PRESETS] ?? \"{}\",\n  );\n  const runtimeConfig: Record<string, unknown> | undefined = JSON.parse(\n    process.env[ENV_INTERNAL_APIBARA_RUNTIME] ?? \"{}\",\n  );\n  const userEnvRuntimeConfig: Record<string, unknown> | undefined = JSON.parse(\n    process.env[USER_ENV_APIBARA_RUNTIME_CONFIG] ?? \"{}\",\n  );\n\n  return {\n    userEnvRuntimeConfig,\n    processedRuntimeConfig,\n    preset,\n    presets,\n    runtimeConfig,\n  };\n}\n\n/**\n * Get the merged runtime config from the user env overrided runtime config, presets and defaults.\n * Priority (Highest to lowest):\n * 1. User env overrided runtime config\n * 2. Preset\n * 3. Defaults\n */\nexport function getProcessedRuntimeConfig({\n  preset,\n  presets,\n  runtimeConfig,\n  userEnvRuntimeConfig,\n}: {\n  preset?: string;\n  presets?: Record<string, unknown>;\n  runtimeConfig?: Record<string, unknown>;\n  userEnvRuntimeConfig?: Record<string, unknown>;\n}) {\n  let _runtimeConfig: Record<string, unknown> = { ...runtimeConfig };\n\n  if (preset) {\n    if (presets === undefined) {\n      throw new Error(\n        `Specified preset \"${preset}\" but no presets were defined`,\n      );\n    }\n\n    if (presets[preset] === undefined) {\n      throw new Error(`Specified preset \"${preset}\" but it was not defined`);\n    }\n\n    const presetValue = presets[preset] as {\n      runtimeConfig: Record<string, unknown>;\n    };\n\n    // Preset applied\n    _runtimeConfig = defu(presetValue.runtimeConfig, _runtimeConfig);\n  }\n\n  if (userEnvRuntimeConfig) {\n    try {\n      // Environment runtime config applied\n      _runtimeConfig = defu(userEnvRuntimeConfig, _runtimeConfig);\n    } catch (error) {\n      throw new Error(\n        \"Failed to parse runtime config from process.env.APIBARA_RUNTIME_CONFIG. Please ensure it is a valid JSON string.\",\n        { cause: error },\n      );\n    }\n  }\n\n  return _runtimeConfig;\n}\n","import {\n  type ArgsDef,\n  type CommandDef,\n  type ParsedArgs,\n  renderUsage,\n} from \"citty\";\nimport consola from \"consola\";\n\nexport const commonArgs = <ArgsDef>{\n  dir: {\n    type: \"string\",\n    description: \"project root directory\",\n  },\n};\n\nexport const checkForUnknownArgs = async <T extends ArgsDef = ArgsDef>(\n  args: ParsedArgs<T>,\n  cmd: CommandDef<T>,\n) => {\n  // Create a list of defined args including both the main arg names and their aliases\n  const definedArgs: string[] = [];\n  if (cmd.args) {\n    for (const [argName, argDef] of Object.entries(cmd.args)) {\n      definedArgs.push(argName);\n      // Add alias to definedArgs if it exists\n      if (argDef.alias) {\n        definedArgs.push(argDef.alias);\n      }\n    }\n  }\n\n  const providedArgs = Object.keys(args).filter((arg) => arg !== \"_\");\n  const wrongArgs = providedArgs.filter((arg) => !definedArgs.includes(arg));\n\n  if (wrongArgs.length > 0) {\n    consola.error(`Unknown arguments: ${wrongArgs.join(\", \")}`);\n    consola.info(await renderUsage(cmd));\n    process.exit(1);\n  }\n};\n"],"names":[],"mappings":"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"}